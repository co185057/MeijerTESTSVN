#if !defined(AFX_STDSCOTEAS_H__72F13F9F_52A5_49AA_942F_7649952AD93C__INCLUDED_)
#define AFX_STDSCOTEAS_H__72F13F9F_52A5_49AA_942F_7649952AD93C__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CStdScotEAS wrapper class

template<class TYPE>
class TOposEas: public TYPE
   {
   public:
	   CLSID const& GetClsid()
	      {
		   static CLSID const clsid
			   = { 0x3c0934, 0x344d, 0x4fe7, { 0xb5, 0x51, 0xa0, 0xee, 0x15, 0xf3, 0x62, 0x23 } };
		   return clsid;
	      }
	   virtual BOOL Create(LPCTSTR lpszClassName,
		   LPCTSTR lpszWindowName, DWORD dwStyle,
		   const RECT& rect,
		   CWnd* pParentWnd, UINT nID,
		   CCreateContext* pContext = NULL)
	      { 
         return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
         }
      BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		   const RECT& rect, CWnd* pParentWnd, UINT nID,
		   CFile* pPersist = NULL, BOOL bStorage = FALSE,
		   BSTR bstrLicKey = NULL)
	      { 
         return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		      pPersist, bStorage, bstrLicKey); 
         }
   // Attributes
   public:
      long GetBinaryConversion()
         {
         long result;
         GetProperty(0x1, VT_I4, (void*)&result);
         return result;
         }
      void SetBinaryConversion(long propVal)
         {
         SetProperty(0x1, VT_I4, propVal);
         }
      long GetCapPowerReporting()
         {
         long result;
         GetProperty(0x2, VT_I4, (void*)&result);
         return result;
         }
      void SetCapPowerReporting(long propVal)
         {
         SetProperty(0x2, VT_I4, propVal);
         }
      CString GetCheckHealthText()
         {
         CString result;
         GetProperty(0x3, VT_BSTR, (void*)&result);
         return result;
         }
      void SetCheckHealthText(LPCTSTR propVal)
         {
         SetProperty(0x3, VT_BSTR, propVal);
         }
      BOOL GetClaimed()
         {
         BOOL result;
         GetProperty(0x4, VT_BOOL, (void*)&result);
         return result;
         }
      void SetClaimed(BOOL propVal)
         {
         SetProperty(0x4, VT_BOOL, propVal);
         }
      BOOL GetDeviceEnabled()
         {
         BOOL result;
         GetProperty(0x5, VT_BOOL, (void*)&result);
         return result;
         }
      void SetDeviceEnabled(BOOL propVal)
         {
         SetProperty(0x5, VT_BOOL, propVal);
         }
      BOOL GetFreezeEvents()
         {
         BOOL result;
         GetProperty(0x6, VT_BOOL, (void*)&result);
         return result;
         }
      void SetFreezeEvents(BOOL propVal)
         {
         SetProperty(0x6, VT_BOOL, propVal);
         }
      long GetPowerNotify()
         {
         long result;
         GetProperty(0x7, VT_I4, (void*)&result);
         return result;
         }
      void SetPowerNotify(long propVal)
         {
         SetProperty(0x7, VT_I4, propVal);
         }
      long GetPowerState()
         {
         long result;
         GetProperty(0x8, VT_I4, (void*)&result);
         return result;
         }
      void SetPowerState(long propVal)
         {
         SetProperty(0x8, VT_I4, propVal);
         }
      long GetResultCode()
         {
         long result;
         GetProperty(0x9, VT_I4, (void*)&result);
         return result;
         }
      void SetResultCode(long propVal)
         {
         SetProperty(0x9, VT_I4, propVal);
         }
      long GetResultCodeExtended()
         {
         long result;
         GetProperty(0xa, VT_I4, (void*)&result);
         return result;
         }
      void SetResultCodeExtended(long propVal)
         {
         SetProperty(0xa, VT_I4, propVal);
         }
      long GetState()
         {
         long result;
         GetProperty(0xb, VT_I4, (void*)&result);
         return result;
         }
      void SetState(long propVal)
         {
         SetProperty(0xb, VT_I4, propVal);
         }
      CString GetControlObjectDescription()
         {
         CString result;
         GetProperty(0xc, VT_BSTR, (void*)&result);
         return result;
         }
      void SetControlObjectDescription(LPCTSTR propVal)
         {
         SetProperty(0xc, VT_BSTR, propVal);
         }
      long GetControlObjectVersion()
         {
         long result;
         GetProperty(0xd, VT_I4, (void*)&result);
         return result;
         }
      void SetControlObjectVersion(long propVal)
         {
         SetProperty(0xd, VT_I4, propVal);
         }
      CString GetServiceObjectDescription()
         {
         CString result;
         GetProperty(0xe, VT_BSTR, (void*)&result);
         return result;
         }
      void SetServiceObjectDescription(LPCTSTR propVal)
         {
         SetProperty(0xe, VT_BSTR, propVal);
         }
      long GetServiceObjectVersion()
         {
         long result;
         GetProperty(0xf, VT_I4, (void*)&result);
         return result;
         }
      void SetServiceObjectVersion(long propVal)
         {
         SetProperty(0xf, VT_I4, propVal);
         }
      CString GetDeviceName()
         {
         CString result;
         GetProperty(0x10, VT_BSTR, (void*)&result);
         return result;
         }
      void SetDeviceName(LPCTSTR propVal)
         {
         SetProperty(0x10, VT_BSTR, propVal);
         }
      CString GetDeviceDescription()
         {
         CString result;
         GetProperty(0x11, VT_BSTR, (void*)&result);
         return result;
         }
      void SetDeviceDescription(LPCTSTR propVal)
         {
         SetProperty(0x11, VT_BSTR, propVal);
         }
      BOOL GetCapDetectTagDeactivate()
         {
         BOOL result;
         GetProperty(0x12, VT_BOOL, (void*)&result);
         return result;
         }
      void SetCapDetectTagDeactivate(BOOL propVal)
         {
         SetProperty(0x12, VT_BOOL, propVal);
         }
      long GetTagDeactivateMode()
         {
         long result;
         GetProperty(0x13, VT_I4, (void*)&result);
         return result;
         }
      void SetTagDeactivateMode(long propVal)
         {
         SetProperty(0x13, VT_I4, propVal);
         }
      long GetTimeout()
         {
         long result;
         GetProperty(0x14, VT_I4, (void*)&result);
         return result;
         }
      void SetTimeout(long propVal)
         {
         SetProperty(0x14, VT_I4, propVal);
         }
   // Operations
   public:
      long Open(LPCTSTR sProfile)
         {
         long result;
         static BYTE parms[] = VTS_BSTR;
         InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms, sProfile);
         return result;
         }
      long Close()
         {
         long result;
         InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
         return result;
         }
      long ClaimDevice(long lTimeout)
         {
         long result;
         static BYTE parms[] = VTS_I4;
         InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lTimeout);
         return result;
         }
      long Claim(long lTimeout)
         {
         long result;
         static BYTE parms[] =
            VTS_I4;
         InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
            lTimeout);
         return result;
         }
      long ReleaseDevice()
         {
         long result;
         InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
         return result;
         }
      long Release()
         {
         long result;
         InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
         return result;
         }
      long CheckHealth(long lLevel)
         {
         long result;
         static BYTE parms[] = VTS_I4;
         InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lLevel);
         return result;
         }
      long DirectIO(long lCommand, long* plData, BSTR* psData)
         {
         long result;
         static BYTE parms[] = VTS_I4 VTS_PI4 VTS_PBSTR;
         InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
            lCommand, plData, psData);
         return result;
         }

   };

class CStdScotEAS : public TOposEas<CWnd>
   {
   protected:
	   DECLARE_DYNCREATE(CStdScotEAS)
   };

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDSCOTEAS_H__72F13F9F_52A5_49AA_942F_7649952AD93C__INCLUDED_)
