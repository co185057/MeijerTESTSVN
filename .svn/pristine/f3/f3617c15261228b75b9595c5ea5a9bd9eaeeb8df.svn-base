//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHJournal.h
/// \brief interface for the CBaseMHJournal class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHJournal_H__INCLUDED_)
#define AFX_BASEMHJournal_H__INCLUDED_

#include "MsgHandler.h"
#include "PrinterMsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHJournal is an implementaion of CBaseMHJournal
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHJournal : public CMsgHandler
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual ~CBaseMHJournal();
    
		//////////////////////////////////////////////////////////////////////
		///
		/// GetJournalData, Return the file handle of a file that contains journal 
		///        presentation data. If TB wants to print some transaction data on 
		///        the journal printer attached to the FastLane terminal, this 
		///        function should return a valid handle to a file that contains journal 
		///        data. The data is transparent to FastLane and is submitted to the 
		///        journal without any modifications. The journal is printed either on 
		///        request by TB (synchronous print request: TB_COMPLETEPRINT state) 
		///        or at the end of each transaction.
		///
		///	@return HFILE  - handle of a file (NULL = no journal data)
		//////////////////////////////////////////////////////////////////////
    virtual HFILE GetJournalData(void);

    // This is required functionality for all MH classes

		//////////////////////////////////////////////////////////////////////
		///
		/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
		///	       and returns the state of the host application, based on the presentation 
		///        data in the message. 
		///
		///	@param CTBMsgObj *pMsg - Pointer to the TB message
		///	@return TBSTATE - the current state of the host application
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

		//////////////////////////////////////////////////////////////////////
		///
		/// ReleaseJournalData, Release the presentation data for the journal printer.
		///       Base class does not do anything with this yet.
		///
		///	@return TBRC - acknowledge the request
		//////////////////////////////////////////////////////////////////////
    virtual TBRC ReleaseJournalData(HFILE hJournalData);

    // Methods for handling Printer message function codes

		//////////////////////////////////////////////////////////////////////
		///
		/// Process_CutPaper, ### ADD API DOC ###
		///
		///	@param CPrinterMsg *pMsg
		///	@return TBSTATE
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_CutPaper( CPrinterMsg* pMsg );

		//////////////////////////////////////////////////////////////////////
		///
		/// Process_Print, ### ADD API DOC ###
		///
		///	@param CPrinterMsg *pMsg
		///	@return TBSTATE
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Print( CPrinterMsg* pMsg );

		//////////////////////////////////////////////////////////////////////
		///
		/// Process_Barcode, ### ADD API DOC ###
		///
		///	@param CPrinterMsg *pMsg
		///	@return TBSTATE
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Barcode( CPrinterMsg* pMsg );

		//////////////////////////////////////////////////////////////////////
		///
		/// Process_Bitmap, ### ADD API DOC ###
		///
		///	@param CPrinterMsg *pMsg
		///	@return TBSTATE
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Bitmap( CPrinterMsg* pMsg );

		//////////////////////////////////////////////////////////////////////
		///
		/// Process_SetBitmap, ### ADD API DOC ###
		///
		///	@param CPrinterMsg *pMsg
		///	@return TBSTATE
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SetBitmap( CPrinterMsg* pMsg );

		//////////////////////////////////////////////////////////////////////
		///
		/// Process_SetLogo, ### ADD API DOC ###
		///
		///	@param CPrinterMsg *pMsg
		///	@return TBSTATE
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SetLogo( CPrinterMsg* pMsg );

		//////////////////////////////////////////////////////////////////////
		///
		/// Process_SlipStatus, ### ADD API DOC ###
		///
		///	@param CPrinterMsg *pMsg
		///	@return TBSTATE
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SlipStatus( CPrinterMsg* pMsg );

protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Constructor
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHJournal();
    
private:
		//////////////////////////////////////////////////////////////////////
		///
		/// Hide Copy Const
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHJournal(CBaseMHJournal &);                    // hide copy const

		//////////////////////////////////////////////////////////////////////
		///
		/// Hide Assignment
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHJournal & operator =(const CBaseMHJournal &); // hide assignment
    
};

#endif 
