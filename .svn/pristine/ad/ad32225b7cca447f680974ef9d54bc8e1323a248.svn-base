///////////////////////////////////////////////////////////////////////////
///
/// \file BaseTBConnectFL.h
/// \brief Interface for the CBaseTBConnectFL class
///
//////////////////////////////////////////////////////////////////////


#ifndef  _BaseTBConnectFL_H_
#define	_BaseTBConnectFL_H_

#include "TBmsgObj.h"
#include "TransBroker.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseTBConnectFL is ...
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseTBConnectFL : public CObject
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual ~CBaseTBConnectFL();

		//////////////////////////////////////////////////////////////////////
		///
		/// GetMessageInfo
		///
		///	@param PSMessageInfo
		///	@return TBRC
		//////////////////////////////////////////////////////////////////////
    virtual TBRC GetMessageInfo(PSMessageInfo psMessageInfo);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetMessageInfo
		///
		///	@param PSMessageInfo
		//////////////////////////////////////////////////////////////////////
    virtual void SetMessageInfo(PSMessageInfo psMessageInfo);

		//////////////////////////////////////////////////////////////////////
		///
		/// ResetMessageInfo
		///
		//////////////////////////////////////////////////////////////////////
    virtual void ResetMessageInfo(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// GetCustomerMessage
		///
		///	@param LPTSTR
		///	@param LPTSTR
		//////////////////////////////////////////////////////////////////////
    virtual TBRC GetCustomerMessage(LPTSTR* psCustomerMessageText, 
                                    LPTSTR* psCustomerMessageAudio);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetCustomerMessageText
		///
		///	@param CString
		//////////////////////////////////////////////////////////////////////
    virtual void SetCustomerMessageText(CString szVal);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetCustomerMessageAudio
		///
		///	@paramg CString
		//////////////////////////////////////////////////////////////////////
    virtual void SetCustomerMessageAudio(CString szVal);

		//////////////////////////////////////////////////////////////////////
		///
		/// ResetCustomerMessageInfo
		///
		//////////////////////////////////////////////////////////////////////
    virtual void ResetCustomerMessageInfo(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// GetDataNeededView
		///
		///	@param PSDataNeededView
		///	@return TBRC
		//////////////////////////////////////////////////////////////////////
    virtual TBRC GetDataNeededView(PSDataNeededView psDataNeededView);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetDataNeededView
		///
		///	@param PSDataNeededView
		//////////////////////////////////////////////////////////////////////
    virtual void SetDataNeededView(PSDataNeededView psDataNeededView);

		//////////////////////////////////////////////////////////////////////
		///
		/// ResetDataNeededView
		///
		//////////////////////////////////////////////////////////////////////
    virtual void ResetDataNeededView(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// SendDataNeeded
		///
		///	@param LPCTSTR
		///	@return TBRC
		//////////////////////////////////////////////////////////////////////
    virtual TBRC SendDataNeeded(LPCTSTR szDataNeededDetails);

//    virtual long SendScotMsg(TBDEVICEID nDevice, UINT nMsgLen, 
//                                void* pMsgData, LPARAM lParam = NULL);
//    virtual long SendScotMsg(CTBMsgObj *pMsgObj);
//    virtual bool SetScotWndHandle(HWND hScotWindow);
//    virtual long SendSCOTShutdownMsg(WPARAM wParam = NULL, LPARAM lParam = NULL);
//    virtual long PostScotMsg(PSMessageElement TB2ScotMsg);
    
protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Contructor, should only be called in this class
		///
		//////////////////////////////////////////////////////////////////////
   	CBaseTBConnectFL();

    SDataNeededView m_SDataNeededView; ///< DataNeededView
    CString          m_szCustomerMessageText;	///< customer text message
    CString          m_szCustomerMessageAudio; ///< customer message audio
    
private:
		//////////////////////////////////////////////////////////////////////
		///
		/// Hide Copy Const
		///
		//////////////////////////////////////////////////////////////////////
    CBaseTBConnectFL(const CBaseTBConnectFL &);              // hide copy const

		//////////////////////////////////////////////////////////////////////
		///
		/// Hide Assignment
		///
		//////////////////////////////////////////////////////////////////////
    CBaseTBConnectFL & operator =(const CBaseTBConnectFL &); // hide assignment

    SMessageInfo    m_SMessage;
    
    UINT	         MsgType;		///< MsgType, defaults to SCOT_MESSAGE
    UINT	         MsgSource;		///< MsgSource, defaults to ID_TRANSBROKER
    WPARAM	         MsgWParam;		///< MsgWParam, defaults to zero
    HWND	         hScotInputWnd;	///< handle to Scot Input Window
};



#endif 