//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHTransaction.h
/// \brief interface for the CBaseMHTransaction class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHTRANSACTION_H__INCLUDED_)
#define AFX_BASEMHTRANSACTION_H__INCLUDED_

#include "MsgHandler.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHTransaction is an implementaion of CBaseMHTransaction
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHTransaction : public CMsgHandler  
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
	virtual ~CBaseMHTransaction();

	//////////////////////////////////////////////////////////////////////
	///
	/// CancelTransaction, cancel transaction flow
	///
	///	@param BOOL need override
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC CancelTransaction(const BOOL fOverride);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetAssistModeStatus, get the assist mode status on the lane
	///
	///	@param long * - assist mode status
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
  virtual TBRC GetAssistModeStatus(long *plAssistModeStatus);
  
	//////////////////////////////////////////////////////////////////////
	///
	/// GetQuantityLimit
	///
	///	@return long - quantity limit
	//////////////////////////////////////////////////////////////////////
	virtual long GetQuantityLimit(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetTransactionLimit
	///
	///	@return long - transaction limit
	//////////////////////////////////////////////////////////////////////
	virtual long GetTransactionLimit(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetCurrentTransactionNumber
	///
	///	@return long - transaction number
	//////////////////////////////////////////////////////////////////////
	virtual long GetCurrentTransactionNumber(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// Finish, FL requests TB end the current sales session. TB_TRXEND state 
	///            returned by TB tells FastLane to call this function.
	///
	///	@return TBRC - acknowledge the request
	//////////////////////////////////////////////////////////////////////
	virtual TBRC Finish(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// LaneClosed, close the lane
	///
	///	@param bool - 
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC LaneClosed(const bool bEnter);
  
  // This is required functionality for all MH classes

	//////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
  virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

	//////////////////////////////////////////////////////////////////////
	///
	/// ResumeTransaction, resume the suspended transaction
	///
	///	@param LPCTSTR - suspended transacation ID
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC ResumeTransaction(LPCTSTR szSuspendID);

	//////////////////////////////////////////////////////////////////////
	///
	/// SetTrainingModeState, training mode status
	///
	///	@param bTMState - traning mode state
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC SetTrainingModeState(bool bTMState);

	//////////////////////////////////////////////////////////////////////
	///
	/// Start, Called to start a trx. Base TB will set the language code that
	///       is passed in and return TB_SUCCESS. Solution-specific TB's should
	///       call the base implementation and then do any customer specific functions
	///
	///	@param LPCTSTR szOverrideCode - The 2 character string denoting the ISO639
	///       language code for language that the customer has selected to use in 
	///       the transaction. NULL if dual language is not supported.
	///	@return TBRC - acknowledge the request
	//////////////////////////////////////////////////////////////////////
	virtual TBRC Start(LPCTSTR szOverrideCode);

	//////////////////////////////////////////////////////////////////////
	///
	/// SuspendTransaction
	///
	///	@param BOOL - override
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC SuspendTransaction(const BOOL fOverride);

	//////////////////////////////////////////////////////////////////////
	///
	/// SuspendTransactionEx, ### ADD API DOC ###
	///
	///	@param BOOL - override
	///	@param LPCTSTR - reason for suspend
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC SuspendTransactionEx(const BOOL fOverride, LPCTSTR szSuspendReasons);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
	CBaseMHTransaction();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide copy const
	///
	//////////////////////////////////////////////////////////////////////
  CBaseMHTransaction(const CBaseMHTransaction &);              // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide assignment
	///
	//////////////////////////////////////////////////////////////////////
	CBaseMHTransaction & operator =(const CBaseMHTransaction &); // hide assignment
};

#endif 
