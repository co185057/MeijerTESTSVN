///////////////////////////////////////////////////////////////////////////
///
/// \file BaseCurrentItem.h
/// \brief interface for the BaseCurrentItem class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////

#if !defined(AFX_CBaseCurrentItem_H__E637CFF0_214F_42FB_B383_FEB3C527D1A8__INCLUDED_)
#define AFX_CBaseCurrentItem_H__E637CFF0_214F_42FB_B383_FEB3C527D1A8__INCLUDED_

#include "basetbdefs.h"
#include "itemdetailsmsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseCurrentItem is  
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseCurrentItem : public CItemDetailsMsg
{
public:
    ////////////////////
    //public functions
    ////////////////////

	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
    virtual ~CBaseCurrentItem();

	//////////////////////////////////////////////////////////////////////
	///
	/// Reset, calls ResetItemDetails and ResetItemExtendedDetails
	///
	//////////////////////////////////////////////////////////////////////
    virtual void Reset();

	//////////////////////////////////////////////////////////////////////
	///
	/// ResetItemDetails, calls CItemDetailsMsg::Reset, resets all item details
	///
	//////////////////////////////////////////////////////////////////////
    virtual void ResetItemDetails();

	//////////////////////////////////////////////////////////////////////
	///
	/// ResetItemExtendedDetails, resets all item extended details
	///
	//////////////////////////////////////////////////////////////////////
    virtual void ResetItemExtendedDetails();
    
	//////////////////////////////////////////////////////////////////////
	///
	/// Refresh, casts a CItemDetailsMsg to a this*, get msg data into class
	///
	///	@param CItemDetailsMsg *pItemMsg
	//////////////////////////////////////////////////////////////////////
    void     Refresh(CItemDetailsMsg *pItemMsg);

	//////////////////////////////////////////////////////////////////////
	///
	/// SetRequireSecBagging, accessor for member variable
	///	
	///	@param long lRequireSecBagging 
	//////////////////////////////////////////////////////////////////////
    void   SetRequireSecBagging(long lRequireSecBagging);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetRequireSecBagging, accessor for member variable
	///
	/// @return long lRequireSecBagging
	//////////////////////////////////////////////////////////////////////
    long   GetRequireSecBagging();

	//////////////////////////////////////////////////////////////////////
	///
	/// SetRequireSecSubstChk, accessor for member variable
	///
	///	@param long lRequireSecSubstChk
	//////////////////////////////////////////////////////////////////////    
    void   SetRequireSecSubstChk(long lRequireSecSubstChk);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetRequireSecSubstChk, accessor for member variable
	///
	///	@return long lRequireSecSubstChk
	//////////////////////////////////////////////////////////////////////
    long   GetRequireSecSubstChk();
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetCategory, accessor for member variable
	///
	///	@param CString LPCTSTR szCategory
	//////////////////////////////////////////////////////////////////////
    void    SetCategory(LPCTSTR szCategory);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetCategory, accessor for member variable
	///
	///	@return CString szCategory
	//////////////////////////////////////////////////////////////////////
    CString GetCategory();
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetExceptionCode, accessor for member variable
	///
	///	@param TBXCode ExceptionCode
	//////////////////////////////////////////////////////////////////////
    void    SetExceptionCode(TBXCODE ExceptionCode);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetExceptionCode, accessor for member variable
	///
	///	@return TBXCODE ExceptionCode
	//////////////////////////////////////////////////////////////////////
    TBXCODE GetExceptionCode( );

	//////////////////////////////////////////////////////////////////////
	///
	/// SetExceptionFlags, accessor for member variable
	///
	///	@param DWORD dwExcpetionFlags
	//////////////////////////////////////////////////////////////////////    
    void    SetExceptionFlags(DWORD dwExceptionFlags);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetExceptionFlags, accessor for member variable
	///
	///	@return DWORD dwExcpetionFlags
	//////////////////////////////////////////////////////////////////////
    DWORD   GetExceptionFlags( );
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetTBOptionFlags, accessor for member variable
	///
	///	@param DWORD dwTBOptionFlags
	//////////////////////////////////////////////////////////////////////
    void    SetTBOptionFlags(DWORD dwTBOptionFlags);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetTBOptionFlags, accessor for member variable
	///
	///	@return DWORD dwTBOptionFlags
	//////////////////////////////////////////////////////////////////////
    DWORD   GetTBOptionFlags( );
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetExceptionWav, accessor for member variable
	///
	///	@param LPCTSTR szExceptionWav
	//////////////////////////////////////////////////////////////////////
    void    SetExceptionWav(LPCTSTR szExceptionWav);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetExceptionWav, accessor for member variable
	///
	///	@return CString szExceptionWav
	//////////////////////////////////////////////////////////////////////
	CString GetExceptionWav( );
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetDealQuantity, accessor for member variable
	///
	///	@param long lDealQuantity
	//////////////////////////////////////////////////////////////////////
    void   SetDealQuantity(long lDealQuantity);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetDealQuantity, accessor for member variable
	///
	///	@return long lDealQuantity
	//////////////////////////////////////////////////////////////////////
    long   GetDealQuantity(void);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetItemQuantityLimit, accessor for member variable
	///
	///	@param long lItemQuantityLimit
	//////////////////////////////////////////////////////////////////////
    void   SetItemQuantityLimit(long lItemQuantityLimit);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetItemQuantityLimit, accessor for member variable
	///
	///	@return long lItemQuantityLimit
	//////////////////////////////////////////////////////////////////////
    long   GetItemQuantityLimit(void);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetDetails, accessor for member variable
	///
	///	@param bool bDetails
	//////////////////////////////////////////////////////////////////////
    void   SetDetails(bool bDetails);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetDetails, accessor for member variable
	///
	///	@return bool bDetails
	//////////////////////////////////////////////////////////////////////
    bool   GetDetails(void);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetOverride, accessor for member variable
	///
	///	@param bool bOverride
	//////////////////////////////////////////////////////////////////////
    void   SetOverride(bool bOverride);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetOverride, accessor for member variable
	///
	///	@return bool bOverride
	//////////////////////////////////////////////////////////////////////
    bool   GetOverride(void);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetQuantityConfirmed, accessor for member variable
	///
	///	@param bool bQuantityConfirmed
	//////////////////////////////////////////////////////////////////////
    void   SetQuantityConfirmed(bool bQuantityConfirmed);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetQuantityConfirmed, accessor for member variable
	///
	///	@return bool bQuantityConfirmed
	//////////////////////////////////////////////////////////////////////
    bool   GetQuantityConfirmed(void);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetQuantityLimitExceeded, accessor for member variable
	///
	///	@param bool bQuantityLimitExceeded
	//////////////////////////////////////////////////////////////////////
    void   SetQuantityLimitExceeded(bool bQuantityLimitExceeded);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetQuantityLimitExceeded, accessor for member variable
	///
	///	@return bool bQuantityLimitExceeded
	//////////////////////////////////////////////////////////////////////
    bool   GetQuantityLimitExceeded(void);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SetScanCodeType, accessor for member variable
	///
	///	@param long lScanCodeType
	//////////////////////////////////////////////////////////////////////
    void   SetScanCodeType(long lScanCodeType);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetScanCodeType, accessor for member variable
	///
	///	@return long lScanCodeType
	//////////////////////////////////////////////////////////////////////
    long   GetScanCodeType(void);

    
    ////////////////////
    //public data
    ////////////////////
    bool    m_bDetails;	///< item details variable
    bool    m_bOverride;	///< override variable
    bool    m_bQuantityLimitExceeded;	///< quantity limit exceeded variable
    bool    m_bQuantityConfirmed;	///< quantity confirmed variable
    
    long    m_nScanCodeType;	///< scan code type variable
    long    m_nDealQuantity;	///< deal quantity variable
    long    m_nItemQuantityLimit;	///< quantity limit variable
    long    m_nRequireSecBagging;	///< require security bagging variable
    long    m_nRequireSecSubstChk;	///< require security substitution check variable
    
    CString m_csCategory;	///< item category variable
    TBXCODE m_ExceptionCode;	///< item exception code
    DWORD   m_dwExceptionFlags;	///< item exception flag
    DWORD   m_dwTBOptionFlags;	///< item option flag
    CString m_csExceptionWav;	///< item exception sound wav file
    
protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentItem();

	//////////////////////////////////////////////////////////////////////
	///
	/// ResetItemProperties, reset all item variables
	///
	//////////////////////////////////////////////////////////////////////
    void ResetItemProperties();
    
private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy Const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentItem(const CBaseCurrentItem &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentItem & operator =(const CBaseCurrentItem &); // hide assignment
};

#endif // !defined(AFX_CBaseCurrentItem_H__E637CFF0_214F_42FB_B383_FEB3C527D1A8__INCLUDED_)
