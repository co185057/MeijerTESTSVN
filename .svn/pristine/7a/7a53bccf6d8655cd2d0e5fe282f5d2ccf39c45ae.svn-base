// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "EASMotionSensor.h"

/////////////////////////////////////////////////////////////////////////////
// CMotionSensor

IMPLEMENT_DYNCREATE(CMotionSensor, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CMotionSensor properties

long CMotionSensor::GetBinaryConversion()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetBinaryConversion(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

CString CMotionSensor::GetCheckHealthText()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CMotionSensor::SetCheckHealthText(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

BOOL CMotionSensor::GetClaimed()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CMotionSensor::SetClaimed(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CMotionSensor::GetDeviceEnabled()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CMotionSensor::SetDeviceEnabled(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CMotionSensor::GetFreezeEvents()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CMotionSensor::SetFreezeEvents(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

long CMotionSensor::GetResultCode()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetResultCode(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CMotionSensor::GetResultCodeExtended()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetResultCodeExtended(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CMotionSensor::GetState()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetState(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

CString CMotionSensor::GetControlObjectDescription()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CMotionSensor::SetControlObjectDescription(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

long CMotionSensor::GetControlObjectVersion()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetControlObjectVersion(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

CString CMotionSensor::GetServiceObjectDescription()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CMotionSensor::SetServiceObjectDescription(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

long CMotionSensor::GetServiceObjectVersion()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetServiceObjectVersion(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

CString CMotionSensor::GetDeviceDescription()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CMotionSensor::SetDeviceDescription(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

CString CMotionSensor::GetDeviceName()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CMotionSensor::SetDeviceName(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

long CMotionSensor::GetCapPowerReporting()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetCapPowerReporting(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

long CMotionSensor::GetPowerNotify()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetPowerNotify(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

long CMotionSensor::GetPowerState()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CMotionSensor::SetPowerState(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CMotionSensor operations

long CMotionSensor::Open(LPCTSTR DeviceName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		DeviceName);
	return result;
}

long CMotionSensor::Close()
{
	long result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMotionSensor::Claim(long Timeout)
{
	/*long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Timeout);*/
	return 0;
}

long CMotionSensor::Release()
{
	long result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMotionSensor::DirectIO(long Command, long* pData, BSTR* pString)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Command, pData, pString);
	return result;
}

long CMotionSensor::CheckHealth(long Level)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Level);
	return result;
}

long CMotionSensor::WaitForMotion(long Timeout)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Timeout);
	return result;
}

void CMotionSensor::SODirectIO(long Command, long* pData, BSTR* pString)
{
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Command, pData, pString);
}

void CMotionSensor::SOStatusUpdate(long Status)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Status);
}

long CMotionSensor::SOProcessID()
{
	long result;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}
