// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "OposEASDeactivator.h"

/////////////////////////////////////////////////////////////////////////////
// EASDeactivator

IMPLEMENT_DYNCREATE(EASDeactivator, CWnd)

/////////////////////////////////////////////////////////////////////////////
// EASDeactivator properties

long EASDeactivator::GetBinaryConversion()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetBinaryConversion(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long EASDeactivator::GetCapPowerReporting()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetCapPowerReporting(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

CString EASDeactivator::GetCheckHealthText()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void EASDeactivator::SetCheckHealthText(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

BOOL EASDeactivator::GetClaimed()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void EASDeactivator::SetClaimed(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL EASDeactivator::GetDeviceEnabled()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void EASDeactivator::SetDeviceEnabled(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL EASDeactivator::GetFreezeEvents()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void EASDeactivator::SetFreezeEvents(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

long EASDeactivator::GetPowerNotify()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetPowerNotify(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long EASDeactivator::GetPowerState()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetPowerState(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

long EASDeactivator::GetResultCode()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetResultCode(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long EASDeactivator::GetResultCodeExtended()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetResultCodeExtended(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long EASDeactivator::GetState()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetState(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

CString EASDeactivator::GetControlObjectDescription()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void EASDeactivator::SetControlObjectDescription(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

long EASDeactivator::GetControlObjectVersion()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetControlObjectVersion(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

CString EASDeactivator::GetServiceObjectDescription()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void EASDeactivator::SetServiceObjectDescription(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

long EASDeactivator::GetServiceObjectVersion()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetServiceObjectVersion(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

CString EASDeactivator::GetDeviceName()
{
	CString result;
	GetProperty(0x10, VT_BSTR, (void*)&result);
	return result;
}

void EASDeactivator::SetDeviceName(LPCTSTR propVal)
{
	SetProperty(0x10, VT_BSTR, propVal);
}

CString EASDeactivator::GetDeviceDescription()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void EASDeactivator::SetDeviceDescription(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

BOOL EASDeactivator::GetCapDetectTagDeactivate()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void EASDeactivator::SetCapDetectTagDeactivate(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

long EASDeactivator::GetTagDeactivateMode()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetTagDeactivateMode(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

long EASDeactivator::GetTimeout()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void EASDeactivator::SetTimeout(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// EASDeactivator operations

long EASDeactivator::Open(LPCTSTR sProfile)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		sProfile);
	return result;
}

long EASDeactivator::Close()
{
	long result;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long EASDeactivator::Claim(long lTimeout)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lTimeout);
	return result;
}

long EASDeactivator::Release()
{
	long result;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long EASDeactivator::CheckHealth(long lLevel)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lLevel);
	return result;
}

long EASDeactivator::DirectIO(long lCommand, long* plData, BSTR* psData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lCommand, plData, psData);
	return result;
}

void EASDeactivator::SOStatusUpdate(long lStatus)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lStatus);
}

void EASDeactivator::SODirectIO(long lEventNumber, long* plData, BSTR* psData)
{
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lEventNumber, plData, psData);
}
