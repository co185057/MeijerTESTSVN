// BaseMHPINPad.h: interface for the CBaseMHPINPad class.
//
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHPINPad.h
/// \brief interface for the CBaseMHPINPad class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHPINPad_H__INCLUDED_)
#define AFX_BASEMHPINPad_H__INCLUDED_

#include "MsgHandler.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHPINPad is an implementaion of CBaseMHPINPad
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHPINPad  : public CMsgHandler
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
	virtual ~CBaseMHPINPad();

    // This is required functionality for all MH classes

	//////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetPINWorkingKey, accessor and mutator for variable
	///
	///	@param PSPINWorkingKey
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC GetPINWorkingKey(PSPINWorkingKey psPINWorkingKey);

	//////////////////////////////////////////////////////////////////////
	///
	/// SetPINWorkingKey, accessor and mutator for variable
	///
	///	@param PSPINWorkingKey
	//////////////////////////////////////////////////////////////////////
    virtual void SetPINWorkingKey(PSPINWorkingKey psPINWorkingKey);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
	CBaseMHPINPad();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy Const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHPINPad(CBaseMHPINPad &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHPINPad & operator =(const CBaseMHPINPad &); // hide assignment
};

#endif 
