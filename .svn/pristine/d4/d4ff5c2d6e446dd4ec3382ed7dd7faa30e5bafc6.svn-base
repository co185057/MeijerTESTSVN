//////////////////////////////////////////////////////////////////////////
///
/// \file BaseCurrentTender.h
/// \brief interface for the CBaseCurrentTender class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BaseCurrentTender_H__INCLUDED_)
#define AFX_BaseCurrentTender_H__INCLUDED_

//#include "transbroker.h"
#include "tenderDetailsMsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseCurrentTender is an implementaion of CBaseCurrentTender
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseCurrentTender : public CTenderDetailsMsg
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual ~CBaseCurrentTender();
    
		//////////////////////////////////////////////////////////////////////
		///
		/// GetPIN, accessors for member variable 
		///
		///	@return CString pin data
		//////////////////////////////////////////////////////////////////////
    CString GetPIN( void);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetPIN, accessors for member variable
		///
		///	@param LPCTSTR pin data
		//////////////////////////////////////////////////////////////////////
    void SetPIN( LPCTSTR);
    
		//////////////////////////////////////////////////////////////////////
		///
		/// GetCardData, accessors for member variable
		///
		///	@return CString card data
		//////////////////////////////////////////////////////////////////////
    CString GetCardData( void);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetCardData, accessors for member variable
		///
		///	@param LPCTSTR card data
		//////////////////////////////////////////////////////////////////////
    void SetCardData( LPCTSTR);
    
		//////////////////////////////////////////////////////////////////////
		///
		/// GetOverride, accessors for member variable
		///
		///	@return BOOL override flag
		//////////////////////////////////////////////////////////////////////
    BOOL    GetOverride( void);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetOverride, accessors for member variable
		///
		///	@param BOOL override flag
		//////////////////////////////////////////////////////////////////////
    void SetOverride( BOOL);
    
		//////////////////////////////////////////////////////////////////////
		///
		/// Reset, reset all member data 
		///
		//////////////////////////////////////////////////////////////////////
    virtual void Reset( void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Refresh, casts a CTenderDetailsMsg to a this*, get msg data into class
		///
		///	@param CTenderDetailsMsg *pMsg
		//////////////////////////////////////////////////////////////////////
    void Refresh(CTenderDetailsMsg *pMsg);

protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Constructor
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentTender();
    
private:
		//////////////////////////////////////////////////////////////////////
		///
		/// Hide copy const
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentTender(const CBaseCurrentTender &);                    // hide copy const

		//////////////////////////////////////////////////////////////////////
		///
		/// Hide assignment
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentTender & operator =(const CBaseCurrentTender &); // hide assignment
    
    CString  m_csCardData; ///< variable for card data
    CString  m_csPIN;			///< variable for pin data
    BOOL     m_bOverride;	///< variable for override flag
};

#endif 
