///////////////////////////////////////////////////////////////////////////
///
/// \file BaseCurrentOptions.h
/// \brief interface for the CBaseCurrentOptions class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////

#if !defined(AFX_BaseCurrentOptions_H__INCLUDED_)
#define AFX_BaseCurrentOptions_H__INCLUDED_

//////////////////////////////////////////////////////////////////////
///
/// CBaseCurrentOptions is  
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseCurrentOptions
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual ~CBaseCurrentOptions();

		//////////////////////////////////////////////////////////////////////
		///
		/// GetTerminalNumber, accessor for member variable
		///
		///	@return long, terminal number
		//////////////////////////////////////////////////////////////////////
    long GetTerminalNumber(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// GetVersionNumber, accessor for member variable
		///
		///	@return long, version number
		//////////////////////////////////////////////////////////////////////
    long GetVersionNumber(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// GetVersionString, accessor for member variable
		///
		///	@return LPTSTR, version info
		//////////////////////////////////////////////////////////////////////
    LPTSTR GetVersionString(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// GetVersionStringBufferLength, 
		///
		//////////////////////////////////////////////////////////////////////
    long   GetVersionStringBufferLength(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetTerminalNumber, accessor for member variable
		///
		///	@param long lVal - terminal number
		//////////////////////////////////////////////////////////////////////
    void SetTerminalNumber(long lVal);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetVersionNumber, accessor for member variable
		///
		///	@param long lVal - version number
		//////////////////////////////////////////////////////////////////////
    void SetVersionNumber(long lVal);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetVersionString, accessor for member variable
		///
		///	@param CString szVal - version info
		//////////////////////////////////////////////////////////////////////
    void SetVersionString(CString szVal);

protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Constructor
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentOptions();

private:
		//////////////////////////////////////////////////////////////////////
		///
		/// Hide Copy Const
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentOptions(CBaseCurrentOptions &);                    // hide copy const

		//////////////////////////////////////////////////////////////////////
		///
		/// Hide assignment
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentOptions & operator =(const CBaseCurrentOptions &); // hide assignment

		//////////////////////////////////////////////////////////////////////
		///
		/// SetVersionBufferLength, accessor for member variable
		///
		///	@param long lVal, version info buffer length
		//////////////////////////////////////////////////////////////////////
    void SetVersionBufferLength(long lVal);

    int m_nTerminalNum; ///< int to store terminal number
    int m_nVersionNum;	///< int to store version number
    CString m_szVersionString;	///< CString for version information
    long m_lVerBufLen;	///< long to store version buffer
};

#endif 
