///////////////////////////////////////////////////////////////////////////
///
/// \file SafeArrayVariant.h
/// \brief interface for the CSafeArrayVariant class
///
//////////////////////////////////////////////////////////////////////
#pragma once

#include <objbase.h>
#include <oleauto.h>
#include <olectl.h>
#include <ocidl.h>
#include <comdef.h>
#include <comutil.h>
#include <comip.h>

//////////////////////////////////////////////////////////////////////
///
/// CSafeArrayVariant is ...
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CSafeArrayVariant
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
	CSafeArrayVariant(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
	virtual ~CSafeArrayVariant(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// SetBuffer, ### ADD DESC ###
	///
	///	@param UCHAR *
	///	@param ULONG
	//////////////////////////////////////////////////////////////////////
	void SetBuffer(UCHAR* pBuffer, ULONG ulnBytes);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetVariant, ### ADD DESC ###
	///
	///	@return VARIANT
	//////////////////////////////////////////////////////////////////////
	VARIANT &GetVariant();

	//////////////////////////////////////////////////////////////////////
	///
	/// SetVariant, ### ADD DESC ###
	///
	///	@param VARIANT
	//////////////////////////////////////////////////////////////////////
	void SetVariant(VARIANT &var);

   // allocate a new buffer and convert variant into it
	//////////////////////////////////////////////////////////////////////
	///
	/// GetNewBuffer, ### ADD DESC ###
	///
	///	@param ULONG
	///	@return UCHAR
	//////////////////////////////////////////////////////////////////////
	UCHAR *GetNewBuffer(ULONG &cb);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetNewBufferFromVariant, allocate a new buffer and convert a variant into the buffer
	///		 cb is the number of bytes copied into buffer
	///	
	///	@param VARIANT
	///	@param ULONG
	///	@return UCHAR * - The allocated buffer
	//////////////////////////////////////////////////////////////////////
  static UCHAR *GetNewBufferFromVariant(const VARIANT &var, ULONG &cb);

  // convert variant into existing buffer
	//////////////////////////////////////////////////////////////////////
	///
	/// GetBuffer, ### ADD DESC ###
	///
	///	@param UCHAR *
	///	@param ULONG
	///	@return ULONG
	//////////////////////////////////////////////////////////////////////
	ULONG GetBuffer(UCHAR* pBuffer, ULONG ulnBytes);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetBufferFromVariant, convert a variant into the provided buffer
	///		 cb indicates the size of buffer
	///
	///	@param VARIANT
	///	@param UCHAR *
	///	@param ULONG
	///	@return ULONG - The number of bytes copied into buffer
	//////////////////////////////////////////////////////////////////////
  static ULONG GetBufferFromVariant(const VARIANT &var, UCHAR* pBuffer, ULONG ulnBytes);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetVariantFromBuffer, ### ADD DESC ###
	///
	///	@param UCHAR *
	///	@param LONG
	///	@return VARIANT
	//////////////////////////////////////////////////////////////////////
	static VARIANT GetVariantFromBuffer(UCHAR* pBuffer, LONG ulnBytes);

	SAFEARRAY		*m_psa;	///< SAFEARRAY pointer
	SAFEARRAYBOUND	m_rgsabound[1];	///< SAFEARRAYBOUND array
  VARIANT			m_var;	///< variable

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy const
	///
	//////////////////////////////////////////////////////////////////////
	CSafeArrayVariant (CSafeArrayVariant &);

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Assignment
	///
	//////////////////////////////////////////////////////////////////////
	CSafeArrayVariant & operator =(const CSafeArrayVariant &);
};
