#pragma once
// $Header: /Integration_Customer/Meijer/CURRENT_DEV/Platform-Core-Patch/remote console manager/src/rap/Approval.cpp 4     10/21/08 4:07p Sm133076 $
/*
 * @(#)Approval.cpp    $Revision: 4 $ $Date: 10/21/08 4:07p $
 *
 * Copyright 2004 by NCR Corporation,
 *
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of NCR Corporation. ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with NCR.
 */
/*
* $Log: /Integration_Customer/Meijer/CURRENT_DEV/Platform-Core-Patch/remote console manager/src/rap/Approval.cpp $
 * 
 * 4     10/21/08 4:07p Sm133076
 * Patch G Migration
 * 
 * 17    10/17/08 7:09p Sc185102
 * SR678
 * 
 * 16    3/17/08 3:16p Sk185127
 * Made changes for SR085 - Improve Bag/Box Behavior
 * 
 * 15    1/29/08 1:13p Cs185088
 * RFC - RAP Intervention in every Training Mode Transaction
 * 
 * 14    1/22/08 4:31a pl250020
 * TAR 352409 : Added new approval type for Suspension Decline Event.
 *
 * 13    12/22/06 10:34a Jj100011
 * RFC 337360
 *
 * 12    10/20/06 9:50a Tn185011
 * Roll back to 244
 *
 * 10    6/24/05 1:40p Dm185016
 * Added capability for customer created rap-data-needed contexts.
 *
 * 7     3/24/05 7:19p Dm185016
 * UNICODE
 *
 * 6     3/15/05 3:33p Dm185016
 * UNICODE
 *
 * 5     3/08/05 4:36p Tp151000
 * 295124
 *
 * TP & AQ
 *
 * 4     3/03/05 3:13p Dm185016
 * TAR 291700
 *
 * 3     2/28/05 6:01p Dm185016
 * Unicode fix
 *
 * 2     2/28/05 4:05p Dm185016
 * lint
 *
 * 1     1/26/05 2:17p Dm185016
 * Moved to new Repository.
//
// 9     1/19/05 2:10p Dm185016
// TAR 290775 - Operator not available on any but the one that handled the
// signon.
//
// 8     1/18/05 3:43p Dm185016
// UNICODE support
//
// 7     1/13/05 1:32p Dm185016
// Added sanity check to detect errors.
//
// 6     1/12/05 5:16p Dm185016
// Static messages now go to correct log file.
//
// 5     12/22/04 10:28a Dm185016
// TAR 288795 - Cookie field now generated by RAProcedures and used to
// coordinate the reporting of interventions.
//
// 4     12/14/04 11:15a Dm185016
// Made to use accessor method.
//
// 3     11/19/04 1:32p Dm185016
// Fixes to make interventions work
//
// 2     11/16/04 11:22a Dm185016
// updates for more interventions
//
// 1     11/11/04 10:04a Dm185016
*/

/*lint -e1506 */

#include "StdAfx.h"
#include "Approval.h"
#include "RCMKeyValue.h"
#include "Message.h"
#include "RAEvents.h"
#include "RCMError.h"

using namespace rap;


BEGIN_KV_HANDLER_CLASS(CInterventionDetails)
    DEFINE_KV_HANDLER_MAP_ENTRY(CInterventionDetails, KEY_TYPE, Type)
    DEFINE_KV_HANDLER_MAP_ENTRY(CInterventionDetails, KEY_COOKIE, Cookie)
END_KV_HANDLER_CLASS()
DEFINE_KV_CSTRING(CInterventionDetails, Type)
DEFINE_KV_LONG(CInterventionDetails, Cookie)


void CInterventionDetails::Clear()
{
    SetType(_T(""));
    SetCookie(-1);
}


CApprovalKeyType CApproval::m_lCount = 1;


CApproval::CCategoryMap CApproval::m_Type2CategoryMap;


CApproval::CApproval(HTRACE hTrace, const _TCHAR *pszApprovalType, const _TCHAR * pszCommand, CIntervention *pIntervention, int nView)
    : CBaseObject(hTrace)
    , m_sApprovalCode(pszApprovalType)
    , m_Id(m_lCount++)
    , m_pParmList(NULL)
    , m_nView(nView)
{
    ITRACE_DEVELOP(_T(__FUNCTION__) _T("View:  ") + IString(nView) + _T("Approval Command:  ") + IString(pszCommand));
    AppendText(pszCommand);

    ParseInterventionData(pIntervention);

    GenerateCategory(m_sApprovalType);
}


void CApproval::ParseInterventionData(CIntervention *pIntervention) throw (...)
{
    m_sApprovalType = _T("");
    m_Cookie        = -1;

    ITRACE_DEVELOP(_T(__FUNCTION__) _T("Intevention is ") + IString(pIntervention==NULL ? _T("NULL") :  _T("not NULL") ));
    _ASSERTE(pIntervention!=NULL);
    if (pIntervention == NULL)
        return;

    CInterventionDetails details;
    details.Clear();

    details.ParseKeys((const _TCHAR *)pIntervention->GetData(), GetTraceHandle());

    if (details.GetCookie() == -1)
        throw IException((const _TCHAR *)(IString(_T("Malformed parameter list.  Missing key:  ")) + KEY_COOKIE)
                       , RCM_API_FAILURE_INVALID_KEY_VALUE_LIST);

    m_sApprovalType = details.GetType();
    m_Cookie = details.GetCookie();
}


CApproval::CApproval(HTRACE hTrace, const _TCHAR *pszApprovalCode, CIntervention *pIntervention, int nView)
    : CBaseObject(hTrace)
    , m_sApprovalCode(pszApprovalCode)
    , m_Id(m_lCount++)
    , m_pParmList(NULL)
    , m_nView(nView)
{
    ITRACE_DEVELOP(_T(__FUNCTION__) _T("View:  ") + IString(nView));
    ParseInterventionData(pIntervention);

    GenerateCategory(m_sApprovalType);

    switch (nView)
    {
        case DATANEEDED_NOVIEW :
            break;
        case DATANEEDED_DONTBAGTHRESHOLDEXCEEDED:
        case DATANEEDED_NEWITEMENTRY:
        case DATANEEDED_BAGITEMTIMEREXPIRED:
        case DATANEEDED_DONEREMOVINGTHRESHOLDEXCEEDED:
        case DATANEEDED_WALKAWAYTIMEREXPIRED:
        case DATANEEDED_BAGBOXTHRESHOLDEXCEEDED:
        case DATANEEDED_UNEXPECTEDDECREASE:
        case DATANEEDED_MISMATCHWEIGHT:
        case DATANEEDED_UNEXPECTEDINCREASE:
		case DATANEEDED_BAGBOXNOTVALID: //SR085
            m_sApprovalCategory = KEY_APPROVAL_TYPE_SECURITY;
            AppendText(KEY_OLD_BUTTONNAME_CCLEARSECURITY);
            break;
        case DATANEEDED_STARTTRAININGTRANS:
        case DATANEEDED_CONFIRMSUSPEND:
        case DATANEEDED_PRICENOTMATCH:
        case DATANEEDED_COUPONTHRESHOLDEXCEEDED:
        case DATANEEDED_COUPONDOLLARMAX:
        case DATANEEDED_PRICEPROMPT:
        case DATANEEDED_MOREDATA:
        case DATANEEDED_DEVICEERROR:
        case DATANEEDED_CHECKONLANE:
        case DATANEEDED_CHECKONLANERAP:
        case DATANEEDED_QUANTITY :  
        case DATANEEDED_ENTERITEM:         
        case DATANEEDED_ENTERCOUPON:       
        case DATANEEDED_MEASUREMENT:       
        case DATANEEDED_ASSEMBLYFEE:
        case DATANEEDED_VERIFYIDENTITY:
        case DATANEEDED_AUTHORIZATIONNUM:
        case DATANEEDED_CSASUSPEND:
        case DATANEEDED_DLIDNUMBER:
        case DATANEEDED_CANCELLTRANSACTION:
        case DATANEEDED_ENTERACCOUNTNUMBER:
        case DATANEEDED_ENTEREXPDATE:
        case DATANEEDED_PRICEPRMT:
        case DATANEEDED_ASSISTEDTENDER:
        case DATANEEDED_CLOSELANE:
        case DATANEEDED_ENDORSEDOCUMENT:
        case DATANEEDED_DOCUMENTNUM:
        case DATANEEDED_BAGAREABACKUP:
        case DATANEEDED_UNDEACTIVATEDITEM:
        case DATANEEDED_VERIFYSIGNATURE:
        case DATANEEDED_ASSISTEDITEM:
        case DATANEEDED_GIFTCARDLIMIT:
        case DATANEEDED_TAKECHANGETIMEREXPIRED:
        case DATANEEDED_STARTTRANSACTION:
        case DATANEEDED_THANKYOUEXPIRED:
        case DATANEEDED_INSERTCOUPONTIMEREXPIRED:
        case DATANEEDED_COLLECTGIFTCARD:
        case DATANEEDED_HOSTOFFLINE:
        case DATANEEDED_WLDBFAILURE:
        case DATANEEDED_STARTTRANSACTIONAM:
        case DATANEEDED_SUSPENSION_DECLINE:			// TAR 352409
		case DATANEEDED_MAXCOUPONLIMIT:					//SR678
		case DATANEEDED_MAXCOUPONLIMITFINALIZATION:		//SR678
            break;
        case DATANEEDED_APPROVEVOIDEDITEM:
            AppendText(KEY_OLD_BUTTONNAME_CAPPROVEVOID);
            break;
        default :
            ITRACE_DEVELOP(_T("User rap-data-needed intervention detected"));
            break;
    }
}


CApproval::CCategoryMap &CApproval::GetCategoryMap()
{
    if (m_Type2CategoryMap.empty())
    {
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_OTHER]                    =  RA_CAT_OTHER;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_UNKNOWN]                  =  RA_CAT_UNKNOWN;
        //m_Type2CategoryMap[] =  RA_CAT_RECEIPT;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_DEVICE_ERROR]             =  RA_CAT_DEVERR;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_SECURITY]                 =  RA_CAT_SECURITY;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_VOID]                     =  RA_CAT_VOID;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_COLLECTION]               =  RA_CAT_COLLECTION;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_READY_TO_COLLECT]         =  RA_CAT_COLLECTION;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_AGE_RESTRICTION]          =  RA_CAT_AGERESTRICT;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_EFT]                      =  RA_CAT_EFT;
        //m_Type2CategoryMap[] =  RA_CAT_AUDACTION;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_OUTOFSERVICE]             =  RA_CAT_OUTOFSERVICE;
        //m_Type2CategoryMap[] =  RA_CAT_MEDIASHORTAGE;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_PRICE_REQUIRED]           =  RA_CAT_PRICENEEDED;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_UNKNOWN_ITEM]             =  RA_CAT_UNKNOWNITEM;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_RECALLED_ITEM]            =  RA_CAT_RECALLEDITEM;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_TIME_RESTRICTED_ITEM]     =  RA_CAT_TIMERESTRICT;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_SUSPEND]                  =  RA_CAT_SUSPEND;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_CALL_FOR_HELP]            =  RA_CAT_CALLFORHELP;
        //m_Type2CategoryMap[] =  RA_CAT_NEGATIVEDEPT;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_VISUAL_VALIDATION]        =  RA_CAT_VISUALVERIFY;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_SIG_CAP]                  =  RA_CAT_SIGCAP;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_OTHER_PAYMENT]            =  RA_CAT_OTHERPAYMENT;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_QUANTITY_RESTRICTED_ITEM] =  RA_CAT_QTYRESTRICT;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_DATANEEDED]               =  RA_CAT_DATANEEDED;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_UNDEACTIVATED_ITEM]       =  RA_CAT_EASITEMACTIVE;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_STALE]                    =  RA_CAT_STALE;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_DATA_NEEDED]              =  RA_CAT_DATANEEDED;
        m_Type2CategoryMap[KEY_APPROVAL_TYPE_RESTRICTED_NOT_ALLOWED]   =  RA_CAT_RESTRICTEDNOTALLOWED;
		m_Type2CategoryMap[KEY_APPROVAL_TYPE_HOPPER_SUBSTITUTION]      =  RA_CAT_HOPPERSUBSTITUTION;
		m_Type2CategoryMap[KEY_APPROVAL_TYPE_SUSPENSIONDECLINED]	   =  RA_CAT_SUSPENSIONDECLINED; // TAR 352409

    }

    return m_Type2CategoryMap;
}


void CApproval::GenerateCategory(const StringType &category)
{
    CCategoryMap categories     = GetCategoryMap();
    CCategoryMap::iterator iter = categories.find(category);
    if (iter != categories.end())
        m_sApprovalCategory = category;
}


CApproval::~CApproval()
{
    delete m_pParmList;
}


CApprovalKeyType CApproval::GetId() { return m_Id; }


CApprovalKeyType CApproval::GetCookie() { return m_Cookie; }


const _TCHAR *CApproval::GetApprovalType() { return m_sApprovalType.c_str(); }


const _TCHAR *CApproval::GetApprovalCode() { return m_sApprovalCode.c_str(); }


bool CApproval::HasData() const { return !m_sData.empty(); }
const _TCHAR *CApproval::GetData() const { return m_sData.c_str(); }
size_t CApproval::GetDataLength() const { return m_sData.size(); }
void CApproval::AppendText(const _TCHAR *pszText) { m_sData += pszText; }


const CKeyValueParmList &CApproval::GetApprovalInfo()
{
    if (m_pParmList == NULL)
        GenerateParmList();

    _ASSERTE(m_pParmList!=NULL);

    return *m_pParmList;
}


void CApproval::GenerateParmList()
{
    m_pParmList = new CKeyValueParmList;
    {
        CKeyValueParmList &parmList = *m_pParmList;
        CKeyValue<const _TCHAR *>::Put(parmList
                            , KEY_AEV_TYPE
                            , m_sApprovalType.c_str());
        CKeyValue<const _TCHAR *>::Put(parmList
                            , KEY_AEV_APPROVAL_CODE
                            , m_sApprovalCode.c_str());
        if (!m_sApprovalCategory.empty())
            CKeyValue<const _TCHAR *>::Put(parmList
                                , KEY_AEV_CATEGORY
                                , m_sApprovalCategory.c_str());
        CKeyValue<int>::Put(parmList
                            , KEY_AEV_VIEW
						    , m_nView);
        CKeyValue<int>::Put(parmList
                            , KEY_AEV_COOKIE
						    , GetCookie());
        if (HasData())
        {
            IString auxData(GetData(), GetDataLength());
            CKeyValue<const _TCHAR *>::Put(parmList
                                , KEY_AEV_AUX_DATA
                                , (const _TCHAR *)auxData);
        }
    }
}
