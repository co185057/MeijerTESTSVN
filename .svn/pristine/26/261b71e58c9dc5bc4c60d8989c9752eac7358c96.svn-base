///////////////////////////////////////////////////////////////////////////
///
/// \file BaseCurrentPINPad.h
/// \brief interface for the CBaseCurrentPrinter class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////

#if !defined(AFX_BaseCurrentPrinter_H__INCLUDED_)
#define AFX_BaseCurrentPrinter_H__INCLUDED_

#include "transbroker.h"
#include "printerMsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseCurrentPrinter is  
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseCurrentPrinter : public CPrinterMsg
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
    virtual ~CBaseCurrentPrinter();

	//////////////////////////////////////////////////////////////////////
	///
	/// GetPrinterError, TBAPI, populates parameter with printer error
	/// 
	/// @param LPTSTR *psErrorMessage - will contain printer error
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC GetPrinterError(LPTSTR* psErrorMessage);

	//////////////////////////////////////////////////////////////////////
	///
	/// SetPrinterError. accessor for member variable
	///
	/// @param CString szError - new printer error message
	//////////////////////////////////////////////////////////////////////
    virtual void SetPrinterError(CString szError);

	//////////////////////////////////////////////////////////////////////
	///
	/// Refresh, casts a CPrinterMsg to a this*, get msg data into class
	///	
	/// @param CPrinterMs  - CPrinterMsg *
	//////////////////////////////////////////////////////////////////////
	void Refresh(CPrinterMsg *pMsg);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentPrinter();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy Const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentPrinter(const CBaseCurrentPrinter &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentPrinter & operator =(const CBaseCurrentPrinter &); // hide assignment

    CString m_szPrinterError;	///< Variable for printer error information.
};

#endif 
