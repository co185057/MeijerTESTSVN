//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHOperator.h
/// \brief interface for the CBaseMHOperator class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHOPERATOR_H__INCLUDED_)
#define AFX_BASEMHOPERATOR_H__INCLUDED_

#include "MsgHandler.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHMSR is an implementaion of CBaseMHMSR
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHOperator : public CMsgHandler
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
	virtual ~CBaseMHOperator();

    // This is required functionality for all MH classes
	//////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

	//////////////////////////////////////////////////////////////////////
	///
	/// SendSignOff, FL requests an operator signoff to the POS system. Not
	///       used currently in base FL app.
	///
	/// @return TBRC - acknowledge the request
	//////////////////////////////////////////////////////////////////////
    virtual TBRC SendSignOff(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// SendSignOn, FL requests an operator signon to the POS system. Not
	///       used currently in base FL app.
	///
	/// @return TBRC - acknowledge the request
	//////////////////////////////////////////////////////////////////////
    virtual TBRC SendSignOn(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// ValidOperator, Validate Operator - not believed to be in use by FL
	///
	///	@param LPCTSTR szOperatorID - Operator ID
	///	@return BOOL - TRUE if a valid cashier, FALSE otherwise
	//////////////////////////////////////////////////////////////////////
    virtual bool ValidOperator(LPCTSTR szOperatorID);

	//////////////////////////////////////////////////////////////////////
	///
	/// ValidateOperator, If this is a valid Operator and PW then return TRUE.
	///       Base TB does not have an implementation for this - solution specific.
	///
	///	@param LPCTSTR szOperatorID - Operator ID
	///	@param LPCSTR szPassword - Operator password
	///	@return BOOL - TRUE if a valid cashier and PW, FALSE otherwise
	//////////////////////////////////////////////////////////////////////
    virtual bool ValidateOperator(LPCTSTR szOperatorID, LPCTSTR szPassword);

	//////////////////////////////////////////////////////////////////////
	///
	/// ValidPassword, Validate Password - not believed to be in use by FL
	///
	///	@param LPCTSTR szPassword - Operator PW
	///	@return BOOL - TRUE if a valid password, FALSE otherwise
	//////////////////////////////////////////////////////////////////////
    virtual bool ValidPassword(LPCTSTR szPassword);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
   	CBaseMHOperator();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHOperator(CBaseMHOperator &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHOperator & operator =(const CBaseMHOperator &); // hide assignment

};

#endif
