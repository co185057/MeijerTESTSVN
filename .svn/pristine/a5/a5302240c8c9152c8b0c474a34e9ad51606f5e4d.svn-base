//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHDisplay.h
/// \brief interface for the CBaseMHDisplay class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHDISPLAY_H__INCLUDED_)
#define AFX_BASEMHDISPLAY_H__INCLUDED_

#include "BaseMsgMap.h"
#include "BaseCurrentDisplay.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHDisplay is an implementaion of CBaseMHDisplay
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHDisplay : public CMsgHandler  
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual ~CBaseMHDisplay();

		//////////////////////////////////////////////////////////////////////
		///
		/// Get2x20, Fastlane calls this for display in assist mode. Core limitations
		///           restrict this to a true 2x20. Base TB class also restricts this.
		///
		///	@param LPCTSTR - szDisplay to be populated with 40 CHAR array
		///	@return TBRC
		//////////////////////////////////////////////////////////////////////
    virtual TBRC Get2x20(LPCTSTR szDisplay);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetMonitorAll - accessor for member variable, called when Fastlane 
		///                 enters and exits assist mode
		///	@param bool - bVal, TRUE = entering assist mode, FALSE = exiting
		//////////////////////////////////////////////////////////////////////
    virtual void SetMonitorAll(BOOL bVal);

		//////////////////////////////////////////////////////////////////////
		///
		/// GetMonitorAll - accessor for member variable
		///
		///	@return BOOL - member variable m_bMonitorAll
		//////////////////////////////////////////////////////////////////////
    virtual BOOL GetMonitorAll(void);

    // This is required functionality for all MH classes

		//////////////////////////////////////////////////////////////////////
		///
		/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
		///	       and returns the state of the host application, based on the presentation 
		///        data in the message. 
		///
		///	@param CTBMsgObj *pMsg - Pointer to the TB message
		///	@return TBSTATE - the current state of the host application
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Constructor
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHDisplay();  // should not be called outside of this class (instance function)
    
private:
		//////////////////////////////////////////////////////////////////////
		///
		/// Hide copy const
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHDisplay(const CBaseMHDisplay &);                    // hide copy const

		//////////////////////////////////////////////////////////////////////
		///
		/// Hide assignment
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHDisplay & operator =(const CBaseMHDisplay &); // hide assignment

    BOOL    m_bMonitorAll; ///< flag for monitor all

};

#endif 

