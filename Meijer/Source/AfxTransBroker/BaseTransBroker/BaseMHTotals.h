//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHTotals.h
/// \brief interface for the CBaseMHTotals class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHTOTALS_H__INCLUDED_)
#define AFX_BASEMHTOTALS_H__INCLUDED_

#include "msgHandler.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHTotals is an implementaion of CBaseMHTotals
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHTotals : public CMsgHandler  
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
    virtual ~CBaseMHTotals();

	//////////////////////////////////////////////////////////////////////
	///
	/// GetAvailableBenefitAmount, ### ADD API DOC ###
	///
	///	@param PSEBTAvailBalance
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    TBRC GetAvailableBenefitAmount(PSEBTAvailBalance psEBTAvailBalance);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetAvailableFoodStampAmount, 
	///
	///	@param PSEBTAvailBalance
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    TBRC GetAvailableFoodStampAmount(PSEBTAvailBalance psEBTAvailBalance);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// GetTotalDetails
	///
	///	@param PSTotalDetails
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	 virtual TBRC GetTotalDetails(PSTotalDetails psDetails);

    // This is required functionality for all MH classes

	 //////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

	//////////////////////////////////////////////////////////////////////
	///
	/// RequestFoodStampEligibleTotal, ### ADD API DOC ###
	///
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC RequestFoodStampEligibleTotal(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// ParseFoodStampTotal, ### ADD API DOC ###
	///
	///	@param PSTotalDetails
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC ParseFoodStampTotal(PSTotalDetails psTotalDetails);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
	CBaseMHTotals();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy Const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHTotals(const CBaseMHTotals &);              // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHTotals & operator =(const CBaseMHTotals &); // hide assignment
};

#endif 
