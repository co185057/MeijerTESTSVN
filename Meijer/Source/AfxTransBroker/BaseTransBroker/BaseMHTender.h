//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHTender.h
/// \brief interface for the CBaseMHTender class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHTender_H__INCLUDED_)
#define AFX_BASEMHTender_H__INCLUDED_

#include "msgHandler.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHTender is an implementaion of CBaseMHTender
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHTender : public CMsgHandler  
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
    virtual ~CBaseMHTender();

	//////////////////////////////////////////////////////////////////////
	///
	/// EPSEndOfDay, ### ADD API DOC ###
	///
	///	@param LPVOID
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC EPSEndOfDay(LPVOID lp);

	//////////////////////////////////////////////////////////////////////
	///
	/// EPSStartOfDay, ### ADD API DOC ###
	///
	///	@param LPVOID
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC EPSStartOfDay(LPVOID lp);

	//////////////////////////////////////////////////////////////////////
	///
	/// EnterTender, ### ADD API DOC ###
	///
	///	@param TBTENDERTYPE - tender type
	///	@param long - tender amount
	///	@param LPCTSTR - card data
	///	@param int - pin length
	///	@param LPCTSTR - encrypted pin
	///	@param bool - override
	///	@param bool - is voided
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC EnterTender( TBTENDERTYPE nTenderType, LONG lAmount, LPCTSTR szCardData,
                              int nPINLength, LPCTSTR szEncryptedPIN, BOOL fOverride, BOOL fVoid);

	//////////////////////////////////////////////////////////////////////
	///
	/// EnterTenderState, Informs TB when FastLane enters or leaves the tender 
	///       state. Appropriate TB action can be solution-specific. This is not 
	///       a request from FL, but a statement of fact.
	///
	///	@param bool bEnter - Flag indicating whether entering (TRUE) or exiting (FALSE)
	///	@return TBRC - acknowledge the request
	//////////////////////////////////////////////////////////////////////
    virtual TBRC EnterTenderState( const bool bEnter);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetTenderDetails, ### ADD API DOC ###
	///
	///	@param PSTenderDetails
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC GetTenderDetails(PSTenderDetails psTenderDetails);

    // This is required functionality for all MH classes

	//////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// VerifyLoyaltyCard, ### ADD API DOC ###
	///
	///	@param LPCTSTR - card data
	///	@param int - data length
	///	@return TBLOYALTYCARDTYPE
	//////////////////////////////////////////////////////////////////////
	virtual TBLOYALTYCARDTYPE VerifyLoyaltyCard(LPCTSTR szCardData,int nDataLen);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetEnterTenderStateValue, ### ADD API DOC ###
	///
	///	@return bool
	//////////////////////////////////////////////////////////////////////
    bool    GetEnterTenderStateValue(void){return m_bEnterTenderStateValue;}

	//////////////////////////////////////////////////////////////////////
	///
	/// HandleTenderEntry, ### ADD API DOC ###
	///
	///	@param LPARAM
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
	virtual TBSTATE HandleTenderEntry(LPARAM lparam);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor, should not be called outside of this class (instance function)
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHTender();  
    
private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide copy const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHTender(const CBaseMHTender &);              // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHTender & operator =(const CBaseMHTender &); // hide assignment

	bool m_bEnterTenderStateValue;	///< flag to indicate on the tender state
};

#endif 

