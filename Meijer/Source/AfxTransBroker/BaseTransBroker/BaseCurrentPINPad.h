///////////////////////////////////////////////////////////////////////////
///
/// \file BaseCurrentPINPad.h
/// \brief interface for the CBaseCurrentPINPad class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////

#if !defined(AFX_BaseCurrentPINPad_H__INCLUDED_)
#define AFX_BaseCurrentPINPad_H__INCLUDED_

#include "transbroker.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseCurrentPINPad is  
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseCurrentPINPad
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual ~CBaseCurrentPINPad();

		//////////////////////////////////////////////////////////////////////
		///
		/// ResetPINWorkingKey, resets all variables associated with PIN 
		///		working key
		///
		//////////////////////////////////////////////////////////////////////
    virtual void ResetPINWorkingKey(void);

    // Get functions for PWK = Pin Working Key
		//////////////////////////////////////////////////////////////////////
		///
		/// Get_PWK_AccountNumber, 
		///
		///	@return LPTSTR, Account Number
		//////////////////////////////////////////////////////////////////////
    virtual LPTSTR           Get_PWK_AccountNumber(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Get_PWK_AccountNumberLength,
		///
		///	@return long - length of account number
		//////////////////////////////////////////////////////////////////////
    virtual long             Get_PWK_AccountNumberLength(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Get_PWK_WorkingKey,
		///
		///	@return LPTSTR - working key
		//////////////////////////////////////////////////////////////////////
    virtual LPTSTR           Get_PWK_WorkingKey(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Get_PWK_WorkingKeyLength,
		///
		///	@return long, length of working key
		//////////////////////////////////////////////////////////////////////
    virtual long             Get_PWK_WorkingKeyLength(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual TBPINBLOCKFORMAT Get_PWK_PinBlockFormat(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Get_PWK_PinpadSystem,
		///
		///	@return TBPINPADSYSTEM
		//////////////////////////////////////////////////////////////////////
    virtual TBPINPADSYSTEM   Get_PWK_PinpadSystem(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Get_PWK_PinBlockEncoding
		///
		///	@return TBPINECODING
		//////////////////////////////////////////////////////////////////////
    virtual TBPINENCODING    Get_PWK_PinBlockEncoding(void);

		//////////////////////////////////////////////////////////////////////
		///
		/// Get_PWK_Unused3,
		///
		///	@return long
		//////////////////////////////////////////////////////////////////////
    virtual long             Get_PWK_Unused3(void);

		
    // Set functions for PWK = Pin Working Key

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_AccountNumber,
		///
		///	@param LPTSTR - account number
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_AccountNumber(LPTSTR);

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_AccountNumberLength,
		///
		///	@param long - length of account number
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_AccountNumberLength(long);

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_WorkingKey,
		///
		///	@param LPTSTR - working key
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_WorkingKey(LPTSTR);

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_WorkingKeyLength,
		///
		///	@param long, length of working key
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_WorkingKeyLength(long);

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_PinBlockFormat,
		///
		///	@param TBPINBLOCKFORMAT
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_PinBlockFormat(TBPINBLOCKFORMAT);

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_PinpadSystem,
		///
		///	@param TBPINPADSYSTEM
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_PinpadSystem(TBPINPADSYSTEM);

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_PinBlockEncoding,
		///
		///	@param TBPINENCODING
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_PinBlockEncoding(TBPINENCODING);

		//////////////////////////////////////////////////////////////////////
		///
		/// Set_PWK_Unused3,
		///
		///	@param long
		//////////////////////////////////////////////////////////////////////
    virtual void  Set_PWK_Unused3(long);


protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Constructor
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentPINPad();

private:
		//////////////////////////////////////////////////////////////////////
		///
		/// Hide Copy Const
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentPINPad(CBaseCurrentPINPad &);                    // hide copy const

		//////////////////////////////////////////////////////////////////////
		///
		/// Hide assignment
		///
		//////////////////////////////////////////////////////////////////////
    CBaseCurrentPINPad & operator =(const CBaseCurrentPINPad &); // hide assignment

    PSPINWorkingKey m_PSPINWorkingKey;	///< PSPINWorkingKey object reference
};

#endif 
