///////////////////////////////////////////////////////////////////////////
///
/// \file BaseCurrentKeylock.h
/// \brief interface for the CBaseCurrentKeylock class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////

#if !defined(AFX_BaseCurrentKeylock_H__INCLUDED_)
#define AFX_BaseCurrentKeylock_H__INCLUDED_
#include "keylockmsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseCurrentKeylock is  
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseCurrentKeylock : public CKeylockMsg
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
    virtual ~CBaseCurrentKeylock();

	//////////////////////////////////////////////////////////////////////
	///
	/// Refresh, casts a CKeylockMsg to a this*, get msg data into class
	///
	///	@param CKeylockMsg  *pMsg
	//////////////////////////////////////////////////////////////////////
	void Refresh(CKeylockMsg *pMsg);

	//////////////////////////////////////////////////////////////////////
	///
	/// getCurrentSecurityLevel, accessor for member variable
	///
	///	@return long currentSecurityLevel
	//////////////////////////////////////////////////////////////////////
    virtual long getCurrentSecurityLevel(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// getExpectedSecurityLevel, accessor for member variable
	///
	///	@return long expected security level
	//////////////////////////////////////////////////////////////////////
    virtual long getExpectedSecurityLevel(void);

	//////////////////////////////////////////////////////////////////////
	///
	/// setCurrentSecurityLevel, accessor for member variable
	///
	///	@param long lVal - current security level
	//////////////////////////////////////////////////////////////////////
    virtual void setCurrentSecurityLevel(long lVal);

	//////////////////////////////////////////////////////////////////////
	///
	/// setExpectedSecurityLevel, accessor for member variable
	///
	///	@param long lVal - expected security level
	//////////////////////////////////////////////////////////////////////
    virtual void setExpectedSecurityLevel(long lVal);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentKeylock();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy Const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentKeylock(const CBaseCurrentKeylock &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide assign,ent
	///
	//////////////////////////////////////////////////////////////////////
    CBaseCurrentKeylock & operator =(const CBaseCurrentKeylock &); // hide assignment

    long m_lCurrentSecurityLevel;	///< variable for current security level
    long m_lExpectedSecurityLevel;  ///< variable for expected security level  
};

#endif 
