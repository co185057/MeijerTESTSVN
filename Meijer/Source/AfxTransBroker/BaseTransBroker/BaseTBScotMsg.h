///////////////////////////////////////////////////////////////////////////
///
/// \file BaseTBScotMsg.h
/// \brief declaration file for transaction broker structures and # defines
///
//////////////////////////////////////////////////////////////////////
#ifndef  _BaseTBScotMsg_H_
#define	_BaseTBScotMsg_H_

#include "TBmsgObj.h"
#include "returnStateMsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseTBScotMsg is ...
///	The Transaction Broker will notify the application of events coming from the host application.  
///	All notifications from the Transaction Broker will be posted as windows messages.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseTBScotMsg : public CObject
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
    virtual ~CBaseTBScotMsg();

		//////////////////////////////////////////////////////////////////////
		///
		/// SendScotMsg
		///
		///	@param TBDEVICEID
		///	@param UINT
		///	@param void*
		///	@param LPARAM
		///	@return long
		//////////////////////////////////////////////////////////////////////
    virtual long SendScotMsg(TBDEVICEID nDevice, UINT nMsgLen, void* pMsgData, LPARAM lParam = NULL);

		//////////////////////////////////////////////////////////////////////
		///
		/// SendScotMsg
		///
		///	@param CTBMsgObj
		///	@return long
		//////////////////////////////////////////////////////////////////////
    virtual long SendScotMsg(CTBMsgObj *pMsgObj);

		//////////////////////////////////////////////////////////////////////
		///
		/// SetScotWndHandle
		///
		///	@param HWND
		///	@return bool
		//////////////////////////////////////////////////////////////////////
    virtual bool SetScotWndHandle(HWND hScotWindow);

		//////////////////////////////////////////////////////////////////////
		///
		/// SendSCOTShutdownMsg
		///
		///	@param WPARAM
		///	@param LPARAM
		///	@return long
		//////////////////////////////////////////////////////////////////////
    virtual long SendSCOTShutdownMsg(WPARAM wParam = NULL, LPARAM lParam = NULL);

		//////////////////////////////////////////////////////////////////////
		///
		/// PostScotMsg
		///
		///	@param PSMessageElement
		//////////////////////////////////////////////////////////////////////
    virtual long PostScotMsg(PSMessageElement TB2ScotMsg);

    //////////////////////////////////////////////////////////////////////
		///
		/// SendReturnStateMsg
		///
		///	@param long
		///	@param RetStateMsgHandlerType
		///	@param TCHAR*
		///	@return long
		//////////////////////////////////////////////////////////////////////
    virtual long SendReturnStateMsg( long lRetStat, RetStateMsgHandlerType i_pfn=NULL, const TCHAR *szMessage=NULL);

		//////////////////////////////////////////////////////////////////////
		///
		/// SendRAPDisplayMsg
		///
		///	@param CString
		///	@return long
		//////////////////////////////////////////////////////////////////////
    virtual long SendRAPDisplayMsg( CString csRAPMsg );

		//////////////////////////////////////////////////////////////////////
		///
		/// GetScotWndHandle
		///
		///	@param HWND
		//////////////////////////////////////////////////////////////////////
    virtual HWND GetScotWndHandle();
protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Constructor, should only be called in this class
		///
		//////////////////////////////////////////////////////////////////////
   	CBaseTBScotMsg();	
    
private:
    UINT	MsgType;		///< MsgType, defaults to SCOT_MESSAGE
    UINT	MsgSource;		///< MsgSource defaults to ID_TRANSBROKER
    WPARAM	MsgWParam;		///< MsgWParam,  defaults to zero
    HWND	hScotInputWnd;	///< hScotInputWnd handle to Scot Input Window
};



#endif // _BaseTBScotMsg_H_