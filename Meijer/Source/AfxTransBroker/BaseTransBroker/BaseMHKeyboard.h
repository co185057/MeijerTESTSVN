//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHKeyboard.h
/// \brief interface for the CBaseMHKeyboard class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHKeyboard_H__INCLUDED_)
#define AFX_BASEMHKeyboard_H__INCLUDED_

#include "MsgHandler.h"
#include "BaseKeyDefines.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHKeyboard is an implementaion of CBaseMHCashDrawer
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHKeyboard  : public CMsgHandler
{
public:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
		virtual ~CBaseMHKeyboard();

		//////////////////////////////////////////////////////////////////////
		///
		/// KeyPress, Send a key code. This is very useful in supporting the full 
		///       Store Mode POS keyboard that mimics the host application’s 
		///       functionality. This function is mainly used in the Assist Mode.
		///       Base TB does not implement this. It must be done at a customer level.
		///
		///	@param USHORT uKey - ASCII key value
		///	@return TBRC - acknowledge the request
		//////////////////////////////////////////////////////////////////////
    virtual TBRC KeyPress(const USHORT uKey);

    // This is required functionality for all MH classes
		//////////////////////////////////////////////////////////////////////
		///
		/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
		///	       and returns the state of the host application, based on the presentation 
		///        data in the message. 
		///
		///	@param CTBMsgObj *pMsg - Pointer to the TB message
		///	@return TBSTATE - the current state of the host application
		//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

protected:
		//////////////////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		//////////////////////////////////////////////////////////////////////
		CBaseMHKeyboard();

private:
		//////////////////////////////////////////////////////////////////////
		///
		/// Hide copy const
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHKeyboard(const CBaseMHKeyboard &);                    // hide copy const

		//////////////////////////////////////////////////////////////////////
		///
		/// Hide assignment
		///
		//////////////////////////////////////////////////////////////////////
    CBaseMHKeyboard & operator =(const CBaseMHKeyboard &); // hide assignment
};

#endif 
