//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHSigCap.h
/// \brief interface for the CBaseMHSigCap class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHSigCap_H__INCLUDED_)
#define AFX_BASEMHSigCap_H__INCLUDED_

#include "MsgHandler.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHSigCap is an implementaion of CBaseMHSigCap
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHSigCap  : public CMsgHandler
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
	virtual ~CBaseMHSigCap();

    // This is required functionality for all MH classes

	//////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);
    
	//////////////////////////////////////////////////////////////////////
	///
	/// SendSigData, ### ADD API DOC ###
	///
	///	@param LPCTSTR - customer name
	///	@param LPCTSTR - signature data
	///	@param DWORD - data length
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC SendSigData(LPCTSTR CustomerName, LPCTSTR cSigData,  DWORD nLength);

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
	CBaseMHSigCap();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy Const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHSigCap(CBaseMHSigCap &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHSigCap & operator =(const CBaseMHSigCap &); // hide assignment
};

#endif 
