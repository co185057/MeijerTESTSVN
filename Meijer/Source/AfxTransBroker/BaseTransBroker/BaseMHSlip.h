//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHSlip.h
/// \brief interface for the CBaseMHSlip class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BaseMHSlip_H__INCLUDED_)
#define AFX_BaseMHSlip_H__INCLUDED_

#include "MsgHandler.h"
#include "PrinterMsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHSlip is an implementaion of CBaseMHSlip
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHSlip : public CMsgHandler
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
	virtual ~CBaseMHSlip();

	//////////////////////////////////////////////////////////////////////
	///
	/// EndorsementCompleted, ### ADD API DOC ###
	///
	///	@param bool - flag to suppress the subsequent
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC EndorsementCompleted(bool bSuppressSubsequent);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetDocEndorsementInfo, ### ADD API DOC ###
	///
	///	@param long * - number remaining
	///	@param LPTSTR * - doc description
	///	@param PTSTR *	- front doc
	/// @param LPTSTR * - back doc
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
	virtual TBRC GetDocEndorsementInfo(long   *plNumRemaining,
                                       LPTSTR *ppszDocDescription, 
                                       PTSTR  *ppszDocFront, 
                                       LPTSTR *ppszDocBack);

	//////////////////////////////////////////////////////////////////////
	///
	/// GetSlipData, Get the slip data
	///
	///	@return HFILE
	//////////////////////////////////////////////////////////////////////
    virtual HFILE GetSlipData(void);
    
	// This is required functionality for all MH classes

	//////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

	//////////////////////////////////////////////////////////////////////
	///
	/// ReleaseSlipData, Release the slip data
	///
	///	@param HFILE
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC ReleaseSlipData(HFILE hSlipData);

    // Methods for handling Printer message function codes
	//////////////////////////////////////////////////////////////////////
	///
	/// Process_CutPaper, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_CutPaper( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_Print, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Print( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_Barcode, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Barcode( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_Bitmap, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Bitmap( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_SetBitmap, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SetBitmap( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_SetLogo, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SetLogo( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_SlipStatus, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SlipStatus( CPrinterMsg* pMsg );

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
	CBaseMHSlip();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide Copy const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHSlip(CBaseMHSlip &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHSlip & operator =(const CBaseMHSlip &); // hide assignment
};

#endif 
