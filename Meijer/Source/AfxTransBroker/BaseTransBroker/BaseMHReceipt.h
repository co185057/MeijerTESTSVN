//////////////////////////////////////////////////////////////////////////
///
/// \file BaseMHReceipt.h
/// \brief interface for the CBaseMHReceipt class.
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////////
#if !defined(AFX_BASEMHRECEIPT_H__INCLUDED_)
#define AFX_BASEMHRECEIPT_H__INCLUDED_

#include "MsgHandler.h"
#include "PrinterMsg.h"

//////////////////////////////////////////////////////////////////////
///
/// CBaseMHReceipt is an implementaion of CBaseMHReceipt
///
///	@author: FastLane POSI
///
//////////////////////////////////////////////////////////////////////
class CBaseMHReceipt : public CMsgHandler
{
public:
	//////////////////////////////////////////////////////////////////////
	///
	/// Destructor
	///
	//////////////////////////////////////////////////////////////////////
	virtual ~CBaseMHReceipt();

	//////////////////////////////////////////////////////////////////////
	///
	/// GetReceiptData, ### ADD API DOC ###
	///
	///	@return HFILE
	//////////////////////////////////////////////////////////////////////
    virtual HFILE GetReceiptData(void);

    // This is required functionality for all MH classes

	//////////////////////////////////////////////////////////////////////
	///
	/// ProcessMessage, Process the message posted by TB. TB analyzes the message 
	///	       and returns the state of the host application, based on the presentation 
	///        data in the message. 
	///
	///	@param CTBMsgObj *pMsg - Pointer to the TB message
	///	@return TBSTATE - the current state of the host application
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE ProcessMessage(CTBMsgObj *pMsgObj);

	//////////////////////////////////////////////////////////////////////
	///
	/// ReleaseReceiptData, ### ADD API DOC ###
	///
	///	@param HFILE
	///	@return TBRC
	//////////////////////////////////////////////////////////////////////
    virtual TBRC ReleaseReceiptData(HFILE hReceiptData);

    // Methods for handling Printer message function codes
	//////////////////////////////////////////////////////////////////////
	///
	/// Process_CutPaper, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_CutPaper( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_Print, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Print( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_Barcode, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Barcode( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_Bitmap, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_Bitmap( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_SetBitmap, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SetBitmap( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_SetLogo, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SetLogo( CPrinterMsg* pMsg );

	//////////////////////////////////////////////////////////////////////
	///
	/// Process_SlipStatus, Handling printer message function
	///
	///	@param CPrinterMsg* - pointer to printer message
	///	@return TBSTATE
	//////////////////////////////////////////////////////////////////////
    virtual TBSTATE Process_SlipStatus( CPrinterMsg* pMsg );

protected:
	//////////////////////////////////////////////////////////////////////
	///
	/// Constructor
	///
	//////////////////////////////////////////////////////////////////////
	CBaseMHReceipt();

private:
	//////////////////////////////////////////////////////////////////////
	///
	/// Hide copy const
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHReceipt(CBaseMHReceipt &);                    // hide copy const

	//////////////////////////////////////////////////////////////////////
	///
	/// Hide assignment
	///
	//////////////////////////////////////////////////////////////////////
    CBaseMHReceipt & operator =(const CBaseMHReceipt &); // hide assignment
};

#endif
