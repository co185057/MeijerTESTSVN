#pragma once
// $Header: /Integration_Customer/Meijer/CURRENT_DEV/Platform-Core-Patch/Remote Console Manager/src/rap/Approval.h 3     1/12/10 11:54p Cu185008 $
/*
 * @(#)Approval.h    $Revision: 3 $ $Date: 1/12/10 11:54p $
 *
 * Copyright 2004 by NCR Corporation,
 *
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of NCR Corporation. ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with NCR.
 */
/*
* $Log: /Integration_Customer/Meijer/CURRENT_DEV/Platform-Core-Patch/Remote Console Manager/src/rap/Approval.h $
 * 
 * 3     1/12/10 11:54p Cu185008
 * G2 Migration.
 * 
 * 3     3/17/05 10:31a Dm185016
 * Fixed yellow light after Approve&Collect pressed. 
 * 
 * 2     2/28/05 4:05p Dm185016
 * lint
 * 
 * 1     1/26/05 2:17p Dm185016
 * Moved to new Repository.
* 
* 5     1/19/05 2:10p Dm185016
* TAR 290775 - Operator not available on any but the one that handled the
* signon.
* 
* 4     12/22/04 10:28a Dm185016
* TAR 288795 - Cookie field now generated by RAProcedures and used to
* coordinate the reporting of interventions.
* 
* 3     11/19/04 1:32p Dm185016
* Fixes to make interventions work
* 
* 2     11/16/04 11:22a Dm185016
* updates for more interventions
* 
* 1     11/11/04 10:04a Dm185016
*/

#include "SMConstants.h"
#include "BaseObject.h"
//#include <hash_map>
#include <map>
#include "RAViews.h"
#include "KVParmList.h"
#include "KeyValueHandler.h"

namespace STATE_MACHINE_NAMESPACE
{
    class IMessage;
}
using namespace STATE_MACHINE_NAMESPACE;

namespace rap
{

typedef IMessage CIntervention;

typedef long CApprovalKeyType;


DECLARE_KV_HANDLER_CLASS_BEGIN(CInterventionDetails)
    DECLARE_KV_CSTRING(Type)
    DECLARE_KV_LONG(Cookie)
DECLARE_KV_HANDLER_CLASS_END


class CApproval
    : public CBaseObject
{

public:

    typedef std::map<StringType, int, StringComparator> CCategoryMap;

    CApproval(HTRACE hTrace, const _TCHAR *pszApprovalCode, const _TCHAR * pszCommand, CIntervention *pIntervention, int nView=DATANEEDED_NOVIEW);
    CApproval(HTRACE hTrace, const _TCHAR *pszApprovalCode, CIntervention *pIntervention, int nView);

    virtual ~CApproval();

    virtual CApprovalKeyType GetId();
    virtual CApprovalKeyType GetCookie();

    virtual const _TCHAR *GetApprovalCode();
    virtual const _TCHAR *GetApprovalType();

    virtual void GenerateCategory(const StringType &);

    virtual bool HasData() const;
    virtual const _TCHAR *GetData() const;
    virtual size_t GetDataLength() const;
    virtual void AppendText(const _TCHAR *);

    virtual const CKeyValueParmList &GetApprovalInfo();

protected:

    virtual void ParseInterventionData(CIntervention *pIntervention) throw (...);
    virtual void GenerateParmList();

    static CCategoryMap &GetCategoryMap();

private:

    CApproval();

    StringType m_sApprovalCode;
    StringType m_sApprovalType;
    StringType m_sApprovalCategory;

    CApprovalKeyType m_Id;
    CApprovalKeyType m_Cookie;

    StringType m_sData;

    CKeyValueParmList *m_pParmList;

    int m_nView;

    static CApprovalKeyType m_lCount;

    static CCategoryMap m_Type2CategoryMap;
};

typedef CApproval *PApproval;

typedef map<CApprovalKeyType, PApproval> CApprovalsMap;

}