// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "securityagent.h"

/////////////////////////////////////////////////////////////////////////////
// CSecurityAgent

IMPLEMENT_DYNCREATE(CSecurityAgent, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSecurityAgent properties

BOOL CSecurityAgent::GetOnline()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CSecurityAgent::SetOnline(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

long CSecurityAgent::GetStatus()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetStatus(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CSecurityAgent::Get_Online()
{
	BOOL result;
	GetProperty(0x0, VT_BOOL, (void*)&result);
	return result;
}

void CSecurityAgent::Set_Online(BOOL propVal)
{
	SetProperty(0x0, VT_BOOL, propVal);
}

long CSecurityAgent::GetSchedule()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetSchedule(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CSecurityAgent::GetSecurityLevel()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetSecurityLevel(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CSecurityAgent::GetState()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetState(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

short CSecurityAgent::GetMode()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CSecurityAgent::SetMode(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

long CSecurityAgent::GetTimers()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetTimers(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

BOOL CSecurityAgent::GetTimersEnabled()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CSecurityAgent::SetTimersEnabled(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CSecurityAgent::GetSimulated()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CSecurityAgent::SetSimulated(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CSecurityAgent::GetServerEnabled()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CSecurityAgent::SetServerEnabled(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

CString CSecurityAgent::GetServerName()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CSecurityAgent::SetServerName(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

long CSecurityAgent::GetServerConfiguration()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetServerConfiguration(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CSecurityAgent::GetServerStatus()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetServerStatus(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CSecurityAgent::GetClientConfiguration()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CSecurityAgent::SetClientConfiguration(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSecurityAgent operations

BOOL CSecurityAgent::VoidRatioOK(long GrossSales, long VoidSales)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GrossSales, VoidSales);
	return result;
}

BOOL CSecurityAgent::ClearVoidTallies()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CSecurityAgent::ClearOtherTallies()
{
	BOOL result;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CSecurityAgent::SendSCOTInput(long ID, long Department, LPCTSTR UPC, long Weight, long Price, long Quantity)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, Department, UPC, Weight, Price, Quantity);
	return result;
}

BOOL CSecurityAgent::SendScaleInput(long Weight, long ReturnCode, long ReturnCodeExt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Weight, ReturnCode, ReturnCodeExt);
	return result;
}

BOOL CSecurityAgent::TransactionAbortOk(long GrossSales)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GrossSales);
	return result;
}

BOOL CSecurityAgent::CouponRatioOK(long GrossSales, long CouponTotals, long Type)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GrossSales, CouponTotals, Type);
	return result;
}

BOOL CSecurityAgent::ClearCouponTallies(long Amount, long Type)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Amount, Type);
	return result;
}

BOOL CSecurityAgent::QuerySMMTol(LPCTSTR csUPC, long lDept, long lTolType, long lPPWU)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		csUPC, lDept, lTolType, lPPWU);
	return result;
}

BOOL CSecurityAgent::UpdateSMMTol(long lAction, LPCTSTR csUPC, long lDept, long lTolType, long lWtExp, long lWtSubCk, long lWtTol, long lPPWU)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lAction, csUPC, lDept, lTolType, lWtExp, lWtSubCk, lWtTol, lPPWU);
	return result;
}

BOOL CSecurityAgent::QuerySMMWLDBwt(LPCTSTR csUPC, long lDept, LPCTSTR csDesc, long lPrice, long lSpecialItem, long lPPWU)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		csUPC, lDept, csDesc, lPrice, lSpecialItem, lPPWU);
	return result;
}

BOOL CSecurityAgent::UpdateSMMWLDBwt(long lAction, LPCTSTR csUPC, long lDept, long lBSwt, long lAppr, long lTally, long lDate, long lInitWt, long lPPWU)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lAction, csUPC, lDept, lBSwt, lAppr, lTally, lDate, lInitWt, lPPWU);
	return result;
}

BOOL CSecurityAgent::SendSCOTInputWithOverrides(long ID, long Dept, LPCTSTR UPC, long Weight, long Price, long Quantity, long lRequireSecBagging, long lRequireSecSubstChk)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, Dept, UPC, Weight, Price, Quantity, lRequireSecBagging, lRequireSecSubstChk);
	return result;
}

void CSecurityAgent::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
