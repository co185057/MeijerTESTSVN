#if !defined(AFX_CASHRECYCLER_H__316B5DCA_578E_4183_B0F1_04FF5FDC3E98__INCLUDED_)
#define AFX_CASHRECYCLER_H__316B5DCA_578E_4183_B0F1_04FF5FDC3E98__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CCashRecyclerWrapper wrapper class

#include <oposchan.h>
#include "TOPOSCashChanger.h"

class CCashDispenseUnit
   {
   public:
      CCashDispenseUnit( CString sCode, DWORD dwUnit )
         : m_sCode( sCode ), m_dwUnit( dwUnit ), m_nCount( 0 ) {}
      long SetCurrentCount( long nCount ) 
         { long lResult = nCount - m_nCount; m_nCount = nCount; return lResult; }
      void AddContainerMapString( CString& sInit ) const;
   public:
      const CString  m_sCode;
      const DWORD    m_dwUnit;
      long           m_nCount;
   };

//dp185016 expose CCashRecyclerWrapper
#ifdef _SCOTSSF_
class DLLIMPORT
#else
class DLLEXPORT
#endif
CCashRecyclerWrapper : public TOPOSCashChanger<CGenericOposIF>
{
public:
   public:
      virtual void OnOposStatusEvent( long nStatus );
      virtual void OnOposDataEvent( long nStatus );
	  virtual void OnOposDirectIOEvent( long EventNumber, LONG* pData, BSTR* pString );

      static TClassPtr<CGenericOposIF> CreateDevice( HKEY hKey, long nDeviceId )
         { return new CCashRecyclerWrapper( nDeviceId ); }
      virtual CCashRecyclerWrapper* GetCashRecycler( void ) { return this; }
      virtual long DoOneTimeInitialization(void);
      virtual BOOL IsAvailable( void );

	  // +TAR 354760
	  // virtual long CheckHealth( long lLevel );
	  // -TAR 354760

   public:
	   BOOL Create( CWnd* pParentWnd, UINT nID );
   private:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xccb90032, 0xb81e, 0x11d2, { 0xab, 0x74, 0x0, 0x40, 0x5, 0x4c, 0x37, 0x19 } };
		return clsid;
	}
   public:  // pure virtuals from CGenericOposIF
      virtual long ClaimDevice( long lTimeout) 
         { return TOPOSCashChanger<CGenericOposIF>::ClaimDevice( 10000L ); }
      virtual long CheckHealth( long lLevel );
  //       { return TOPOSCashChanger<CGenericOposIF>::CheckHealth( 1 ); }
      virtual long GetDeviceClass( void ) const 
         { return DMCLASS_CASHRECYCLER; }
      virtual void OnTimer( UINT nIDEvent );
      virtual void SetDeviceEnabled( BOOL bEnable );
      bool SetDeviceEnabledRaw( BOOL bEnable );	// Really disable device (SafePay)

// Attributes
public:

// Operations
public:
	long DispenseCash(LPCTSTR CashCounts);
	long DispenseChange(long Amount);
	long BeginDeposit();
    long ReadCashCounts(BSTR* pCashCounts, BOOL* pDiscrepancy);
	long GetDepositAmount(bool bRaw=false);
	long EndDeposit(long Success);
	long FixDeposit();
	long DirectIO(long Command, long* pData, BSTR* pString);
	long GetResultCodeExtended();
	void ResetCounts(void);
	void UpdateDispensed(long nDisp);
	void PauseCounts(bool bPause);
	bool GetDepositState(void);			// TAR 311332  Return true if accepting currency.
   CString GetCurrencyContainerMap( void );
   CString GetDispensedCashList( void );
   CString GetLowIndicatorList( void );
	long ReadDropBoxCounts(BSTR* pCashCounts, BOOL* pDiscrepancy);

	// +SafePay recycler methods.
	bool ReadStatusBits(long &pData);
	bool IsUrgentMessagePending(void);
	long RetrieveUrgentMessage(CString &msg);
	long UnlockNoteCover(void);
	// -SafePay recycler methods.

	bool PauseCounts(void) const;

private:
	CCashRecyclerWrapper( long nDeviceId ) : m_ModelID(DEVID_UNKNOWN)
						{ m_nDeviceId = nDeviceId; } 
   long ReadCashCountsInternal( CString& sResult );
   long BeginDispense( void );
   void ProcessNotes( void );
   BOOL GetRawCurrencyString(long pData, CString &csTarget);
   long BuildCoinDispenseStr(CString &csTarget);
   long BuildNoteDispenseStr(CString &csTarget);

private:
   CMap< CString, LPCTSTR, TClassPtr<CCashDispenseUnit>, TClassPtr<CCashDispenseUnit> > 
      m_mapDepositCoins;
   CMap< CString, LPCTSTR, TClassPtr<CCashDispenseUnit>, TClassPtr<CCashDispenseUnit> > 
      m_mapDepositNotes;
   CArray< TClassPtr<CCashDispenseUnit>, TClassPtr<CCashDispenseUnit> > m_aDispenseCoins;
   CArray< TClassPtr<CCashDispenseUnit>, TClassPtr<CCashDispenseUnit> > m_aDispenseNotes;
   CUIntArray m_aCoinDenom;		// Ordered list of coin denominations.
   CUIntArray m_aNoteDenom;		// Ordered list of bill denominations.
   static long m_nDeposited;
   static long m_nDispensed;
   static long m_nCurrentDeposit;
   static bool m_bPauseCount;
   static bool m_bDepositState;	// true if BeginDeposit() has been called, false

   enum	SCOT_RECYCLER_MODEL { DEVID_UNKNOWN, DEVID_GLORY, DEVID_SAFEPAY };
   SCOT_RECYCLER_MODEL m_ModelID;
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_CASHRECYCLER_H__316B5DCA_578E_4183_B0F1_04FF5FDC3E98__INCLUDED_)
