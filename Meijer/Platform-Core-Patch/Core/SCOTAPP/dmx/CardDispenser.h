#if !defined(AFX_OPOSPOINTCARDRW_H__43363C61_05DA_4A70_A9D9_7DB941C254D0__INCLUDED_)
#define AFX_OPOSPOINTCARDRW_H__43363C61_05DA_4A70_A9D9_7DB941C254D0__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CCardDispenser wrapper class

//class CCardDispenser : public CWnd, public CGenericOposIF
class CCardDispenser : public CGenericOposIF
{
public:
	static TClassPtr<CGenericOposIF> CreateDevice( HKEY hKey, long nDeviceId )
	 { return new CCardDispenser( nDeviceId ); }
    virtual CCardDispenser* GetCardDispenser( void ) { return this; }
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xccb90212, 0xb81e, 0x11d2, { 0xab, 0x74, 0x0, 0x40, 0x5, 0x4c, 0x37, 0x19 } };
		return clsid;
	}
	virtual void OnOposStatusEvent( long nStatus );
	virtual void OnOposDirectIOEvent( long lEventCode, long FAR* lpData, BSTR FAR *pString);
    virtual long GetDeviceClass( void ) const { return DMCLASS_CARDDISPENSER; }
	BOOL Create( CWnd* pParentWnd, UINT nID );
/*	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }
*/

// Attributes
public:

// Operations
public:
	long GetOpenResult();
	long GetBinaryConversion();
	void SetBinaryConversion(long nNewValue);
	long GetCapPowerReporting();
	CString GetCheckHealthText();
	BOOL GetClaimed();
	long GetDataCount();
	BOOL GetDataEventEnabled();
	void SetDataEventEnabled(BOOL bNewValue);
	BOOL GetDeviceEnabled();
	void SetDeviceEnabled(BOOL bNewValue);
	BOOL GetFreezeEvents();
	void SetFreezeEvents(BOOL bNewValue);
	long GetOutputID();
	long GetPowerNotify();
	void SetPowerNotify(long nNewValue);
	long GetPowerState();
	long GetResultCode();
	long GetResultCodeExtended();
	long GetState();
	CString GetControlObjectDescription();
	long GetControlObjectVersion();
	CString GetServiceObjectDescription();
	long GetServiceObjectVersion();
	CString GetDeviceDescription();
	CString GetDeviceName();
	long CheckHealth(long Level);
	long ClaimDevice(long Timeout);
	long Claim(long Timeout);
	long ClearInput();
	long ClearOutput();
	long Close();
	long DirectIO(long Command, long* pData, BSTR* pString);
	long Open(LPCTSTR DeviceName);
	long ReleaseDevice();
	BOOL GetCapBold();
	BOOL GetCapCardEntranceSensor();
	long GetCapCharacterSet();
	BOOL GetCapCleanCard();
	BOOL GetCapClearPrint();
	BOOL GetCapDhigh();
	BOOL GetCapDwide();
	BOOL GetCapDwideDhigh();
	BOOL GetCapItalic();
	BOOL GetCapLeft90();
	BOOL GetCapPrint();
	BOOL GetCapPrintMode();
	BOOL GetCapRight90();
	BOOL GetCapRotate180();
	long GetCapTracksToRead();
	long GetCapTracksToWrite();
	long GetCardState();
	long GetCharacterSet();
	void SetCharacterSet(long nNewValue);
	CString GetCharacterSetList();
	CString GetFontTypeFaceList();
	long GetLineChars();
	void SetLineChars(long nNewValue);
	CString GetLineCharsList();
	long GetLineHeight();
	void SetLineHeight(long nNewValue);
	long GetLineSpacing();
	void SetLineSpacing(long nNewValue);
	long GetLineWidth();
	long GetMapMode();
	void SetMapMode(long nNewValue);
	long GetMaxLine();
	long GetPrintHeight();
	long GetReadState1();
	long GetReadState2();
	long GetRecvLength1();
	long GetRecvLength2();
	long GetSidewaysMaxChars();
	long GetSidewaysMaxLines();
	CString GetTrack1Data();
	CString GetTrack2Data();
	CString GetTrack3Data();
	CString GetTrack4Data();
	CString GetTrack5Data();
	CString GetTrack6Data();
	long GetTracksToRead();
	void SetTracksToRead(long nNewValue);
	long GetTracksToWrite();
	void SetTracksToWrite(long nNewValue);
	CString GetWrite1Data();
	void SetWrite1Data(LPCTSTR lpszNewValue);
	CString GetWrite2Data();
	void SetWrite2Data(LPCTSTR lpszNewValue);
	CString GetWrite3Data();
	void SetWrite3Data(LPCTSTR lpszNewValue);
	CString GetWrite4Data();
	void SetWrite4Data(LPCTSTR lpszNewValue);
	CString GetWrite5Data();
	void SetWrite5Data(LPCTSTR lpszNewValue);
	CString GetWrite6Data();
	void SetWrite6Data(LPCTSTR lpszNewValue);
	long GetWriteState1();
	long GetWriteState2();
	long BeginInsertion(long Timeout);
	long BeginRemoval(long Timeout);
	long CleanCard();
	long ClearPrintWrite(long Kind, long Hposition, long Vposition, long Width, long Height);
	long EndInsertion();
	long EndRemoval();
	long PrintWrite(long Kind, long Hposition, long Vposition, LPCTSTR Data);
	long RotatePrint(long Rotation);
	long ValidateData(LPCTSTR Data);
	BOOL GetCapMapCharacterSet();
	BOOL GetMapCharacterSet();
	void SetMapCharacterSet(BOOL bNewValue);
	BOOL GetCapStatisticsReporting();
	BOOL GetCapUpdateStatistics();
	long ResetStatistics(LPCTSTR StatisticsBuffer);
	long RetrieveStatistics(BSTR* pStatisticsBuffer);
	long UpdateStatistics(LPCTSTR StatisticsBuffer);
private:
//	CCardDispenser( long nDeviceId ) : CGenericOposIF( nDeviceId  ) { } 
inline	CCardDispenser( long nDeviceId )  { m_nDeviceId = nDeviceId; } 


};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_OPOSPOINTCARDRW_H__43363C61_05DA_4A70_A9D9_7DB941C254D0__INCLUDED_)
