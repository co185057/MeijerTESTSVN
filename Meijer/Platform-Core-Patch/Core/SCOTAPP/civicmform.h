#if !defined(AFX_IVICMFORM_H__54025940_C9D1_11D3_BBA8_00A0C9EDD523__INCLUDED_)
#define AFX_IVICMFORM_H__54025940_C9D1_11D3_BBA8_00A0C9EDD523__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

#include "OposControl.h"

/////////////////////////////////////////////////////////////////////////////
// CIVICMForm wrapper class

class CIVICMForm : public COposControl
{
protected:
	DECLARE_DYNCREATE(CIVICMForm)
public:
    //TAR253061 - made this more generic for future use
	LPCTSTR GetProgid()
	{
		static TCHAR progid[] = _T("OPOS.IVICMForm");
		return progid;
	}

	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetProgid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetProgid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetCheckHealthText();
	void SetCheckHealthText(LPCTSTR);
	BOOL GetClaimed();
	void SetClaimed(BOOL);
	BOOL GetDataEventEnabled();
	void SetDataEventEnabled(BOOL);
	BOOL GetDeviceEnabled();
	void SetDeviceEnabled(BOOL);
	BOOL GetFreezeEvents();
	void SetFreezeEvents(BOOL);
	long GetResultCode();
	void SetResultCode(long);
	long GetResultCodeExtended();
	void SetResultCodeExtended(long);
	long GetState();
	void SetState(long);
	CString GetControlObjectDescription();
	void SetControlObjectDescription(LPCTSTR);
	long GetControlObjectVersion();
	void SetControlObjectVersion(long);
	CString GetServiceObjectDescription();
	void SetServiceObjectDescription(LPCTSTR);
	long GetServiceObjectVersion();
	void SetServiceObjectVersion(long);
	CString GetDeviceDescription();
	void SetDeviceDescription(LPCTSTR);
	CString GetDeviceName();
	void SetDeviceName(LPCTSTR);
	long GetRows();
	void SetRows(long);
	long GetColumns();
	void SetColumns(long);
	CString GetRawData();
	void SetRawData(LPCTSTR);
	long GetTotalPoints();
	void SetTotalPoints(long);
	CString GetPointArray();
	void SetPointArray(LPCTSTR);
	long GetBinaryConversion();
	void SetBinaryConversion(long);
	long GetDataCount();
	void SetDataCount(long);
	long GetAutoDisable();
	void SetAutoDisable(long);
	long GetCharacterSet();
	void SetCharacterSet(long);
	CString GetCharacterSetList();
	void SetCharacterSetList(LPCTSTR);
	long GetFontHeight();
	void SetFontHeight(long);
	long GetFontWidth();
	void SetFontWidth(long);
	long GetFontTypeface();
	void SetFontTypeface(long);
	CString GetFontTypefaceList();
	void SetFontTypefaceList(LPCTSTR);
	BOOL GetCapDisplay();
	void SetCapDisplay(BOOL);
	BOOL GetCapRealTimeData();
	void SetCapRealTimeData(BOOL);
	BOOL GetCapUserTerminated();
	void SetCapUserTerminated(BOOL);
	long GetMaximumX();
	void SetMaximumX(long);
	long GetMaximumY();
	void SetMaximumY(long);
	BOOL GetRealTimeDataEnabled();
	void SetRealTimeDataEnabled(BOOL);
	CString GetKeyPadBoardPrompt1();
	void SetKeyPadBoardPrompt1(LPCTSTR);
	CString GetKeyPadBoardPrompt2();
	void SetKeyPadBoardPrompt2(LPCTSTR);
	CString GetKeyPadBoardText();
	void SetKeyPadBoardText(LPCTSTR);
	long GetFontStyle();
	void SetFontStyle(long);

// Operations
public:
	long Open(LPCTSTR DeviceName);
	long Close();
	long ClaimDevice(long Timeout); //TAR253061
	long ReleaseDevice();           //TAR253061
	long CheckHealth(long Level);
	long ClearInput();
	long DirectIO(long Command, long* pData, BSTR* pString);
	void SOData(long Status);
	void SODirectIO(long EventNumber, long* pData, BSTR* pString);
	void SOError(long ResultCode, long ResultCodeExtended, long ErrorLocus, long* pErrorResponse);
	void SOStatusUpdate(long Data);
	long StoreFormOnDevice(long formNumber, LPCTSTR formFile);
	long DisplayFormOnDevice(long formNumber, LPCTSTR formFile);
	long DisplayTextAt(long Row, long Column, LPCTSTR Data, long Attribute);
	long QueryRadioButtonState(long groupID, long controlID, long* controlState);
	long QueryScriptBoxData(long scriptBoxID);
	long QuerySignatureBoxData();
	long QueryKeyPadBoardText();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_IVICMFORM_H__54025940_C9D1_11D3_BBA8_00A0C9EDD523__INCLUDED_)
